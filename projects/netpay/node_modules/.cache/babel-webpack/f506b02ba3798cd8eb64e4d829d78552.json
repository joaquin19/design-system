{"ast":null,"code":"import { cldr } from './info';\nconst predefinedDatePatterns = {\n  s: \"yyyy'-'MM'-'dd'T'HH':'mm':'ss\",\n  u: \"yyyy'-'MM'-'dd HH':'mm':'ss'Z'\"\n};\nconst YEAR_REGEX = /y+/g;\nconst SHORT_DATE = [[\"dateFormats\", \"short\"]];\nconst datePatterns = {\n  D: [[\"dateFormats\", \"full\"]],\n  m: [[\"dateTimeFormats\", \"availableFormats\", \"MMMd\"]],\n  M: [[\"dateTimeFormats\", \"availableFormats\", \"MMMMd\"]],\n  y: [[\"dateTimeFormats\", \"availableFormats\", \"yMMM\"]],\n  Y: [[\"dateTimeFormats\", \"availableFormats\", \"yMMMM\"]],\n  F: [[\"dateFormats\", \"full\"], [\"timeFormats\", \"medium\"]],\n  g: [[\"dateTimeFormats\", \"availableFormats\", \"yMd\"], [\"timeFormats\", \"short\"]],\n  G: [[\"dateTimeFormats\", \"availableFormats\", \"yMd\"], [\"timeFormats\", \"medium\"]],\n  t: [[\"timeFormats\", \"short\"]],\n  T: [[\"timeFormats\", \"medium\"]]\n};\n\nfunction toArray(obj) {\n  let result = [];\n  let names = Object.getOwnPropertyNames(obj);\n\n  for (let idx = 0; idx < names.length; idx++) {\n    let value = obj[names[idx]];\n    result.push(value);\n  }\n\n  return result;\n}\n\nfunction getCalendarNames(info, isObj) {\n  const result = {};\n\n  for (let formatType in info) {\n    let names = result[formatType] = {};\n\n    for (let format in info[formatType]) {\n      let formats = info[formatType][format];\n      names[format] = isObj ? formats : toArray(formats);\n    }\n  }\n\n  return result;\n}\n\nfunction getEraNames(eras) {\n  const result = {};\n  const format = result.format = {};\n  const eraNameMap = {\n    eraAbbr: \"abbreviated\",\n    eraNames: \"wide\",\n    eraNarrow: \"narrow\"\n  };\n\n  for (let eraFormatName in eras) {\n    let formatName = eraNameMap[eraFormatName];\n    format[formatName] = eras[eraFormatName];\n  }\n\n  return result;\n}\n\nfunction loadCalendarNames(locale, calendar) {\n  const localeCalendar = cldr[locale].calendar;\n  localeCalendar.days = getCalendarNames(calendar.days);\n  localeCalendar.months = getCalendarNames(calendar.months);\n  localeCalendar.quarters = getCalendarNames(calendar.quarters);\n  localeCalendar.dayPeriods = getCalendarNames(calendar.dayPeriods, true);\n  localeCalendar.eras = getEraNames(calendar.eras);\n}\n\nfunction loadCalendarDateFields(locale, fields) {\n  const localeCalendar = cldr[locale].calendar;\n  const dateFields = {};\n\n  for (let field in fields) {\n    const [fieldName, formatType = 'wide'] = field.split('-');\n    const fieldInfo = dateFields[fieldName] || {};\n    const displayName = fields[field].displayName;\n\n    if (!displayName) {\n      continue;\n    }\n\n    fieldInfo[formatType] = displayName;\n    dateFields[fieldName] = fieldInfo;\n  }\n\n  localeCalendar.dateFields = dateFields;\n}\n\nfunction getPredefinedFormat(paths, calendar) {\n  const result = [];\n\n  for (let pathIdx = 0; pathIdx < paths.length; pathIdx++) {\n    let fields = paths[pathIdx];\n    let pattern = calendar;\n\n    for (let idx = 0; idx < fields.length; idx++) {\n      pattern = pattern[fields[idx]];\n    }\n\n    result.push(pattern);\n  }\n\n  return result.join(\" \");\n}\n\nfunction loadCalendarPatterns(locale, calendar) {\n  const cldrCalendar = cldr[locale].calendar;\n  const patterns = cldrCalendar.patterns = {};\n  patterns.d = getPredefinedFormat(SHORT_DATE, calendar).replace(YEAR_REGEX, 'y');\n\n  for (let pattern in datePatterns) {\n    patterns[pattern] = getPredefinedFormat(datePatterns[pattern], calendar);\n  }\n\n  for (let pattern in predefinedDatePatterns) {\n    patterns[pattern] = predefinedDatePatterns[pattern];\n  }\n\n  const dateTimeFormats = calendar.dateTimeFormats;\n  cldrCalendar.dateTimeFormats = {\n    full: dateTimeFormats.full,\n    long: dateTimeFormats.long,\n    medium: dateTimeFormats.medium,\n    short: dateTimeFormats.short,\n    availableFormats: dateTimeFormats.availableFormats\n  };\n  cldrCalendar.timeFormats = calendar.timeFormats;\n  cldrCalendar.dateFormats = calendar.dateFormats;\n}\n\nexport default function loadCalendarInfo(locale, info) {\n  const calendar = cldr[locale].calendar = cldr[locale].calendar || {};\n\n  for (let field in info) {\n    if (field === \"timeZoneNames\") {\n      calendar.gmtFormat = info[field].gmtFormat;\n      calendar.gmtZeroFormat = info[field].gmtZeroFormat;\n    } else if (field === \"calendars\" && info[field].gregorian) {\n      loadCalendarPatterns(locale, info[field].gregorian);\n      loadCalendarNames(locale, info[field].gregorian);\n    } else if (field === \"fields\") {\n      loadCalendarDateFields(locale, info.fields);\n    }\n  }\n}","map":null,"metadata":{},"sourceType":"module"}