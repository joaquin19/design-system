{"ast":null,"code":"import Group from '../shapes/group';\nimport Point from '../geometry/point';\nimport { Observable } from '../common';\nimport { eventElement, eventCoordinates, elementPadding, elementScale, elementSize, elementOffset } from '../util';\nconst events = [\"click\", \"mouseenter\", \"mouseleave\", \"mousemove\", \"resize\"];\n\nclass Surface extends Observable {\n  constructor(element, options) {\n    super();\n    this.options = Object.assign({}, options);\n    this.element = element;\n    this.element._kendoExportVisual = this.exportVisual.bind(this);\n    this._click = this._handler(\"click\");\n    this._mouseenter = this._handler(\"mouseenter\");\n    this._mouseleave = this._handler(\"mouseleave\");\n    this._mousemove = this._handler(\"mousemove\");\n    this._visual = new Group();\n    elementSize(element, this.options);\n    this.bind(events, this.options);\n\n    this._enableTracking();\n  }\n\n  draw(element) {\n    this._visual.children.push(element);\n  }\n\n  clear() {\n    this._visual.children = [];\n  }\n\n  destroy() {\n    this._visual = null;\n    this.element._kendoExportVisual = null;\n    this.unbind();\n  }\n\n  eventTarget(e) {\n    let domNode = eventElement(e);\n    let node;\n\n    while (!node && domNode) {\n      node = domNode._kendoNode;\n\n      if (domNode === this.element) {\n        break;\n      }\n\n      domNode = domNode.parentElement;\n    }\n\n    if (node) {\n      return node.srcElement;\n    }\n  }\n\n  exportVisual() {\n    return this._visual;\n  }\n\n  getSize() {\n    return elementSize(this.element);\n  }\n\n  currentSize(size) {\n    if (size) {\n      this._size = size;\n    } else {\n      return this._size;\n    }\n  }\n\n  setSize(size) {\n    elementSize(this.element, size);\n    this.currentSize(size);\n\n    this._resize();\n  }\n\n  resize(force) {\n    const size = this.getSize();\n    const currentSize = this.currentSize();\n\n    if (force || (size.width > 0 || size.height > 0) && (!currentSize || size.width !== currentSize.width || size.height !== currentSize.height)) {\n      this.currentSize(size);\n\n      this._resize(size, force);\n\n      this.trigger(\"resize\", size);\n    }\n  }\n\n  size(value) {\n    if (!value) {\n      return this.getSize();\n    }\n\n    this.setSize(value);\n  }\n\n  suspendTracking() {\n    this._suspendedTracking = true;\n  }\n\n  resumeTracking() {\n    this._suspendedTracking = false;\n  }\n\n  _enableTracking() {}\n\n  _resize() {}\n\n  _handler(eventName) {\n    return e => {\n      const node = this.eventTarget(e);\n\n      if (node && !this._suspendedTracking) {\n        this.trigger(eventName, {\n          element: node,\n          originalEvent: e,\n          type: eventName\n        });\n      }\n    };\n  }\n\n  _elementOffset() {\n    const element = this.element;\n    const padding = elementPadding(element);\n    const {\n      left,\n      top\n    } = elementOffset(element);\n    return {\n      left: left + padding.left,\n      top: top + padding.top\n    };\n  }\n\n  _surfacePoint(e) {\n    const offset = this._elementOffset();\n\n    const coord = eventCoordinates(e);\n    const x = coord.x - offset.left;\n    const y = coord.y - offset.top;\n    const inverseTransform = elementScale(this.element).invert();\n    const point = new Point(x, y).transform(inverseTransform);\n    return point;\n  }\n\n}\n\nexport default Surface;","map":null,"metadata":{},"sourceType":"module"}