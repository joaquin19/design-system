{"ast":null,"code":"import Element from './element';\nimport Point from '../geometry/point';\nimport Rect from '../geometry/rect';\nimport toMatrix from '../geometry/to-matrix';\nimport paintable from '../mixins/paintable';\nimport withPoints from '../mixins/with-points';\nimport { defined, measureText } from '../util';\nconst DEFAULT_FONT = \"12px sans-serif\";\nconst DEFAULT_FILL = \"#000\";\n\nclass Text extends paintable(withPoints(Element, [\"position\"])) {\n  get nodeType() {\n    return \"Text\";\n  }\n\n  constructor(content, position = new Point(), options = {}) {\n    super(options);\n    this.content(content);\n    this.position(position);\n\n    if (!this.options.font) {\n      this.options.font = DEFAULT_FONT;\n    }\n\n    if (!defined(this.options.fill)) {\n      this.fill(DEFAULT_FILL);\n    }\n  }\n\n  content(value) {\n    if (defined(value)) {\n      this.options.set(\"content\", value);\n      return this;\n    }\n\n    return this.options.get(\"content\");\n  }\n\n  measure() {\n    const metrics = measureText(this.content(), {\n      font: this.options.get(\"font\")\n    });\n    return metrics;\n  }\n\n  rect() {\n    const size = this.measure();\n    const pos = this.position().clone();\n    return new Rect(pos, [size.width, size.height]);\n  }\n\n  bbox(transformation) {\n    const combinedMatrix = toMatrix(this.currentTransform(transformation));\n    return this.rect().bbox(combinedMatrix);\n  }\n\n  rawBBox() {\n    return this.rect().bbox();\n  }\n\n  _containsPoint(point) {\n    return this.rect().containsPoint(point);\n  }\n\n}\n\nexport default Text;","map":null,"metadata":{},"sourceType":"module"}