{"ast":null,"code":"import { Class } from '../common';\n\nclass BaseNode extends Class {\n  constructor(srcElement) {\n    super();\n    this.childNodes = [];\n    this.parent = null;\n\n    if (srcElement) {\n      this.srcElement = srcElement;\n      this.observe();\n    }\n  }\n\n  destroy() {\n    if (this.srcElement) {\n      this.srcElement.removeObserver(this);\n    }\n\n    const children = this.childNodes;\n\n    for (let i = 0; i < children.length; i++) {\n      this.childNodes[i].destroy();\n    }\n\n    this.parent = null;\n  }\n\n  load() {}\n\n  observe() {\n    if (this.srcElement) {\n      this.srcElement.addObserver(this);\n    }\n  }\n\n  append(node) {\n    this.childNodes.push(node);\n    node.parent = this;\n  }\n\n  insertAt(node, pos) {\n    this.childNodes.splice(pos, 0, node);\n    node.parent = this;\n  }\n\n  remove(index, count) {\n    const end = index + count;\n\n    for (let i = index; i < end; i++) {\n      this.childNodes[i].removeSelf();\n    }\n\n    this.childNodes.splice(index, count);\n  }\n\n  removeSelf() {\n    this.clear();\n    this.destroy();\n  }\n\n  clear() {\n    this.remove(0, this.childNodes.length);\n  }\n\n  invalidate() {\n    if (this.parent) {\n      this.parent.invalidate();\n    }\n  }\n\n  geometryChange() {\n    this.invalidate();\n  }\n\n  optionsChange() {\n    this.invalidate();\n  }\n\n  childrenChange(e) {\n    if (e.action === \"add\") {\n      this.load(e.items, e.index);\n    } else if (e.action === \"remove\") {\n      this.remove(e.index, e.items.length);\n    }\n\n    this.invalidate();\n  }\n\n}\n\nexport default BaseNode;","map":null,"metadata":{},"sourceType":"module"}