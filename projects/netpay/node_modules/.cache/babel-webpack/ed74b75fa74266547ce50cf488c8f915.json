{"ast":null,"code":"import Matrix from '../geometry/matrix';\nimport toMatrix from '../geometry/to-matrix';\nconst IDENTITY_MATRIX_HASH = Matrix.IDENTITY.toString();\n\nconst measurable = TBase => class extends TBase {\n  bbox(transformation) {\n    const combinedMatrix = toMatrix(this.currentTransform(transformation));\n    const matrixHash = combinedMatrix ? combinedMatrix.toString() : IDENTITY_MATRIX_HASH;\n    let bbox;\n\n    if (this._bboxCache && this._matrixHash === matrixHash) {\n      bbox = this._bboxCache.clone();\n    } else {\n      bbox = this._bbox(combinedMatrix);\n      this._bboxCache = bbox ? bbox.clone() : null;\n      this._matrixHash = matrixHash;\n    }\n\n    const strokeWidth = this.options.get(\"stroke.width\");\n\n    if (strokeWidth && bbox) {\n      bbox.expand(strokeWidth / 2);\n    }\n\n    return bbox;\n  }\n\n  geometryChange() {\n    delete this._bboxCache;\n    this.trigger(\"geometryChange\", {\n      element: this\n    });\n  }\n\n};\n\nexport default measurable;","map":null,"metadata":{},"sourceType":"module"}