{"ast":null,"code":"import toCubicPolynomial from './to-cubic-polynomial';\nimport solveCubicEquation from './solve-cubic-equation';\nimport calculateCurveAt from './calculate-curve-at';\nimport close from './close';\nexport default function curveIntersectionsCount(points, point, bbox) {\n  const polynomial = toCubicPolynomial(points, \"x\");\n  const roots = solveCubicEquation(polynomial[0], polynomial[1], polynomial[2], polynomial[3] - point.x);\n  let rayIntersection, intersectsRay;\n  let count = 0;\n\n  for (let i = 0; i < roots.length; i++) {\n    rayIntersection = calculateCurveAt(roots[i], \"y\", points);\n    intersectsRay = close(rayIntersection, point.y) || rayIntersection > point.y;\n\n    if (intersectsRay && ((roots[i] === 0 || roots[i] === 1) && bbox.bottomRight().x > point.x || 0 < roots[i] && roots[i] < 1)) {\n      count++;\n    }\n  }\n\n  return count;\n}","map":null,"metadata":{},"sourceType":"module"}