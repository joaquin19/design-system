{"ast":null,"code":"import { CURRENCY, PERCENT, LIST_SEPARATOR, GROUP_SEPARATOR, CURRENCY_PLACEHOLDER, PERCENT_PLACEHOLDER, POINT, EMPTY } from '../common/constants';\nimport isNegativeZero from '../common/is-negative-zero';\nimport groupInteger from './group-integer';\nimport round from '../common/round';\nimport { setStyleOptions, setFormatLiterals, replaceLiterals } from './utils';\nconst SHARP = \"#\";\nconst ZERO = \"0\";\nconst trailingZerosRegExp = /(\\.(?:[0-9]*[1-9])?)0+$/g;\nconst trailingPointRegExp = /\\.$/;\nconst commaRegExp = /\\,/g;\n\nfunction trimTrailingZeros(value, lastZero) {\n  let trimRegex;\n\n  if (lastZero === 0) {\n    trimRegex = trailingZerosRegExp;\n  } else {\n    trimRegex = new RegExp(`(\\\\.[0-9]{${lastZero}}[1-9]*)0+$`, 'g');\n  }\n\n  return value.replace(trimRegex, '$1').replace(trailingPointRegExp, EMPTY);\n}\n\nfunction roundNumber(formatOptions) {\n  let {\n    number,\n    format\n  } = formatOptions;\n  let decimalIndex = format.indexOf(POINT);\n\n  if (decimalIndex !== -1) {\n    const zeroIndex = format.lastIndexOf(ZERO) - decimalIndex;\n    const sharpIndex = format.lastIndexOf(SHARP) - decimalIndex;\n    const hasZero = zeroIndex > -1;\n    const hasSharp = sharpIndex > -1;\n    let fraction = number.toString().split(\"e\");\n\n    if (fraction[1]) {\n      fraction = round(number, Math.abs(fraction[1]));\n    } else {\n      fraction = fraction[0];\n    }\n\n    fraction = fraction.split(POINT)[1] || EMPTY;\n    let precision = fraction.length;\n    let trailingZeros = -1;\n\n    if (!hasZero && !hasSharp) {\n      formatOptions.format = format.substring(0, decimalIndex) + format.substring(decimalIndex + 1);\n      decimalIndex = -1;\n      precision = 0;\n    } else if (hasZero && zeroIndex > sharpIndex) {\n      precision = zeroIndex;\n    } else if (sharpIndex > zeroIndex) {\n      if (hasSharp && precision > sharpIndex) {\n        precision = sharpIndex;\n      } else if (hasZero && precision < zeroIndex) {\n        precision = zeroIndex;\n      }\n\n      trailingZeros = hasZero ? zeroIndex : 0;\n    }\n\n    if (precision > -1) {\n      number = round(number, precision);\n\n      if (trailingZeros > -1) {\n        number = trimTrailingZeros(number, trailingZeros);\n      }\n    }\n  } else {\n    number = round(number);\n  }\n\n  if (formatOptions.negative && number * -1 >= 0 && !formatOptions.negativeZero) {\n    formatOptions.negative = false;\n  }\n\n  formatOptions.number = number;\n  formatOptions.decimalIndex = decimalIndex;\n}\n\nfunction isConstantFormat(format) {\n  return format.indexOf(SHARP) === -1 && format.indexOf(ZERO) === -1;\n}\n\nfunction setValueSpecificFormat(formatOptions) {\n  let {\n    number,\n    format\n  } = formatOptions;\n  format = format.split(LIST_SEPARATOR);\n\n  if ((formatOptions.negative || formatOptions.negativeZero) && format[1]) {\n    format = format[1];\n    formatOptions.hasNegativeFormat = true;\n  } else if (number === 0) {\n    const zeroFormat = format[2];\n    format = zeroFormat || format[0];\n\n    if (zeroFormat && isConstantFormat(zeroFormat)) {\n      formatOptions.constant = zeroFormat;\n    }\n  } else {\n    format = format[0];\n  }\n\n  formatOptions.format = format;\n}\n\nfunction setGroupOptions(formatOptions) {\n  formatOptions.hasGroup = formatOptions.format.indexOf(GROUP_SEPARATOR) > -1;\n\n  if (formatOptions.hasGroup) {\n    formatOptions.format = formatOptions.format.replace(commaRegExp, EMPTY);\n  }\n}\n\nfunction placeholderIndex(index1, index2, start) {\n  let index;\n\n  if (index1 === -1 && index2 !== -1) {\n    index = index2;\n  } else if (index1 !== -1 && index2 === -1) {\n    index = index1;\n  } else {\n    index = start ? Math.min(index1, index2) : Math.max(index1, index2);\n  }\n\n  return index;\n}\n\nfunction setPlaceholderIndices(formatOptions) {\n  const format = formatOptions.format;\n  let sharpIndex = format.indexOf(SHARP);\n  let zeroIndex = format.indexOf(ZERO);\n  let start = placeholderIndex(sharpIndex, zeroIndex, true);\n  sharpIndex = format.lastIndexOf(SHARP);\n  zeroIndex = format.lastIndexOf(ZERO);\n  let end = placeholderIndex(sharpIndex, zeroIndex);\n\n  if (start === format.length) {\n    end = start;\n  }\n\n  formatOptions.start = start;\n  formatOptions.end = end;\n  formatOptions.lastZeroIndex = zeroIndex;\n}\n\nfunction replaceStyleSymbols(number, style, symbol) {\n  let result = number;\n\n  if (style === CURRENCY || style === PERCENT) {\n    result = EMPTY;\n\n    for (let idx = 0, length = number.length; idx < length; idx++) {\n      let ch = number.charAt(idx);\n      result += ch === CURRENCY_PLACEHOLDER || ch === PERCENT_PLACEHOLDER ? symbol : ch;\n    }\n  }\n\n  return result;\n}\n\nfunction replacePlaceHolders(formatOptions, info) {\n  const {\n    start,\n    end,\n    negative,\n    negativeZero,\n    format,\n    decimalIndex,\n    lastZeroIndex,\n    hasNegativeFormat,\n    hasGroup\n  } = formatOptions;\n  let number = formatOptions.number;\n  const value = number.toString().split(POINT);\n  const length = format.length;\n  const integer = value[0];\n  const fraction = value[1] || EMPTY;\n  const integerLength = integer.length;\n  let replacement = EMPTY;\n  number = format.substring(0, start);\n\n  if ((negative || negativeZero) && !hasNegativeFormat) {\n    number += \"-\";\n  }\n\n  for (let idx = start; idx < length; idx++) {\n    let ch = format.charAt(idx);\n\n    if (decimalIndex === -1) {\n      if (end - idx < integerLength) {\n        number += integer;\n        break;\n      }\n    } else {\n      if (lastZeroIndex !== -1 && lastZeroIndex < idx) {\n        replacement = EMPTY;\n      }\n\n      if (decimalIndex - idx <= integerLength && decimalIndex - idx > -1) {\n        number += integer;\n        idx = decimalIndex;\n      }\n\n      if (decimalIndex === idx) {\n        number += (fraction ? info.numbers.symbols.decimal : EMPTY) + fraction;\n        idx += end - decimalIndex + 1;\n        continue;\n      }\n    }\n\n    if (ch === ZERO) {\n      number += ch;\n      replacement = ch;\n    } else if (ch === SHARP) {\n      number += replacement;\n    }\n  }\n\n  if (hasGroup) {\n    number = groupInteger(number, start + (negative && !hasNegativeFormat ? 1 : 0), Math.max(end, integerLength + start), info.numbers.decimal, info);\n  }\n\n  if (end >= start) {\n    number += format.substring(end + 1);\n  }\n\n  return number;\n}\n\nfunction applyCustomFormat(formatOptions, info) {\n  let number = formatOptions.number;\n\n  if (formatOptions.start !== -1) {\n    number = replacePlaceHolders(formatOptions, info);\n    number = replaceStyleSymbols(number, formatOptions.style, formatOptions.symbol);\n    number = replaceLiterals(number, formatOptions.literals);\n  }\n\n  return number;\n}\n\nexport default function customNumberFormat(number, format, info) {\n  const formatOptions = {\n    negative: number < 0,\n    number: Math.abs(number),\n    negativeZero: isNegativeZero(number),\n    format: format\n  };\n  setValueSpecificFormat(formatOptions);\n\n  if (formatOptions.constant) {\n    return formatOptions.constant;\n  }\n\n  setFormatLiterals(formatOptions);\n  setStyleOptions(formatOptions, info);\n  setGroupOptions(formatOptions);\n  roundNumber(formatOptions);\n  setPlaceholderIndices(formatOptions);\n  return applyCustomFormat(formatOptions, info);\n}","map":null,"metadata":{},"sourceType":"module"}