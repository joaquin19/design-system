{"ast":null,"code":"import { isPresent, isNotNullOrEmptyString } from './utils';\nimport { serializeFilter } from './odata-filtering.operators';\nimport { ifElse, constant } from './funcs';\n\nconst serializeSort = orderby => {\n  const str = orderby.filter(sort => isPresent(sort.dir)).map(sort => {\n    const order = sort.field.replace(/\\./g, \"/\");\n    return sort.dir === \"desc\" ? order + \" desc\" : order;\n  }).join(\",\");\n  return str ? `$orderby=${str}` : str;\n};\n\nconst emptyString = constant('');\n\nconst concat = a => b => a + b;\n\nconst serializeKey = (strings, val) => ifElse(isPresent, concat(strings[0]), emptyString)(val);\n\nconst rules = (settings, state) => key => ({\n  \"filter\": serializeFilter(state.filter || {}, settings),\n  \"skip\": serializeKey`$skip=${state.skip}`,\n  \"sort\": serializeSort(state.sort || []),\n  \"take\": serializeKey`$top=${state.take}`\n})[key]; // tslint:enable:max-line-length\n\n/**\n * Converts a [State]({% slug api_kendo-data-query_state %}) into an OData v4 compatible string.\n *\n * @param {State} state - The state that will be serialized.\n * @param {ODataSettings} settings - The settings that are used during the serialization.\n * @returns {string} - The serialized state.\n */\n\n\nexport const toODataString = (state, settings = {}) => Object.keys(state).map(rules(settings, state)).filter(isNotNullOrEmptyString).join('&');","map":null,"metadata":{},"sourceType":"module"}