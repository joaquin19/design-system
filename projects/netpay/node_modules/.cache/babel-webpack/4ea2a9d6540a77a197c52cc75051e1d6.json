{"ast":null,"code":"const merge = (data, left, middle, right, compare) => {\n  let leftLength = middle - left;\n  let rightLength = right - middle;\n  const temp = [];\n\n  for (let idx = 0; idx < leftLength; idx++) {\n    temp.push(data[left + idx]);\n  }\n\n  let cursor1 = 0;\n  let cursor2 = middle;\n  let dest = left;\n\n  do {\n    if (compare(data[cursor2], temp[cursor1]) < 0) {\n      data[dest++] = data[cursor2++];\n      rightLength--;\n    } else {\n      data[dest++] = temp[cursor1++];\n      leftLength--;\n    }\n  } while (rightLength > 0 && leftLength > 0);\n\n  while (leftLength) {\n    data[dest++] = temp[cursor1++];\n    leftLength--;\n  }\n\n  while (rightLength) {\n    data[dest++] = data[cursor2++];\n    rightLength--;\n  }\n};\n/**\n * @hidden\n */\n\n\nexport const sort = (data, start, end, compare) => {\n  if (end - start < 2) {\n    return;\n  }\n\n  const mid = start + end >>> 1; // tslint:disable-line:no-bitwise\n\n  sort(data, start, mid, compare);\n  sort(data, mid, end, compare);\n  merge(data, start, mid, end, compare);\n};","map":null,"metadata":{},"sourceType":"module"}