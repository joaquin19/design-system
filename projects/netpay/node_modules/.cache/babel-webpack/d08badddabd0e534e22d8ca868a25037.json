{"ast":null,"code":"const MONTHS = {\n  Jan: 0,\n  Feb: 1,\n  Mar: 2,\n  Apr: 3,\n  May: 4,\n  Jun: 5,\n  Jul: 6,\n  Aug: 7,\n  Sep: 8,\n  Oct: 9,\n  Nov: 10,\n  Dec: 11\n};\nconst DAYS = {\n  Sun: 0,\n  Mon: 1,\n  Tue: 2,\n  Wed: 3,\n  Thu: 4,\n  Fri: 5,\n  Sat: 6\n};\nconst MS_PER_MINUTE = 60000;\n/**\n * @hidden\n *\n * A function that finds zone rules which become applicable after a specific time.\n *\n * @param year - The value of the year.\n * @param rule - A specific zone rule.\n * @param zone - The definition of the zone.\n *\n * @return - Returns an extended rule.\n *\n * @example\n * ```ts-no-run\n * ruleToDate(2018, rule); // A rule that contains {'2018': |2018 DST date| }\n * ```\n */\n\nexport const ruleToDate = (year, rule, zoneOffset) => {\n  const month = rule[3];\n  const on = rule[4];\n  const time = rule[5];\n  let date;\n  const ruleOffset = time[3] === 'u' ? -zoneOffset * MS_PER_MINUTE : 0;\n\n  if (!isNaN(on)) {\n    date = new Date(Date.UTC(year, MONTHS[month], on, time[0], time[1], time[2]) + ruleOffset);\n  } else if (on.indexOf('last') === 0) {\n    date = new Date(Date.UTC(year, MONTHS[month] + 1, 1, time[0] - 24, time[1], time[2]) + ruleOffset);\n    const targetDay = DAYS[on.substr(4, 3)];\n    const ourDay = date.getUTCDay();\n    date.setUTCDate(date.getUTCDate() + targetDay - ourDay - (targetDay > ourDay ? 7 : 0));\n  } else if (on.indexOf('>=') >= 0) {\n    date = new Date(Date.UTC(year, MONTHS[month], on.substr(5), time[0], time[1], time[2], 0) + ruleOffset);\n    const targetDay = DAYS[on.substr(0, 3)];\n    const ourDay = date.getUTCDay();\n    date.setUTCDate(date.getUTCDate() + targetDay - ourDay + (targetDay < ourDay ? 7 : 0));\n  }\n\n  return date;\n};","map":null,"metadata":{},"sourceType":"module"}