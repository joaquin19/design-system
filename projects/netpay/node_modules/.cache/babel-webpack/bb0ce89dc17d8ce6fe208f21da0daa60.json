{"ast":null,"code":"import { Class } from '../common';\nlet instance;\n\nclass AnimationFactory extends Class {\n  static get current() {\n    if (!instance) {\n      instance = new AnimationFactory();\n    }\n\n    return instance;\n  }\n\n  constructor() {\n    super();\n    this._items = [];\n  }\n\n  register(name, type) {\n    this._items.push({\n      name: name,\n      type: type\n    });\n  }\n\n  create(element, options) {\n    const items = this._items;\n    let match;\n\n    if (options && options.type) {\n      const type = options.type.toLowerCase();\n\n      for (let i = 0; i < items.length; i++) {\n        if (items[i].name.toLowerCase() === type) {\n          match = items[i];\n          break;\n        }\n      }\n    }\n\n    if (match) {\n      return new match.type(element, options);\n    }\n  }\n\n}\n\nexport default AnimationFactory;","map":null,"metadata":{},"sourceType":"module"}