{"ast":null,"code":"import HasObservers from '../core/has-observers';\nimport Point from './point';\nimport Size from './size';\n\nclass Rect extends HasObservers {\n  constructor(origin = new Point(), size = new Size(), cornerRadius = 0) {\n    super();\n    this.setOrigin(origin);\n    this.setSize(size);\n    this.setCornerRadius(cornerRadius);\n  }\n\n  clone() {\n    return new Rect(this.origin.clone(), this.size.clone());\n  }\n\n  equals(other) {\n    return other && other.origin.equals(this.origin) && other.size.equals(this.size);\n  }\n\n  setOrigin(value) {\n    this._observerField(\"origin\", Point.create(value));\n\n    this.geometryChange();\n    return this;\n  }\n\n  getOrigin() {\n    return this.origin;\n  }\n\n  setCornerRadius(radius) {\n    this.cornerRadius = Array.isArray(radius) ? radius : [radius, radius];\n    this.geometryChange();\n    return this;\n  }\n\n  getCornerRadius() {\n    return this.cornerRadius;\n  }\n\n  setSize(value) {\n    this._observerField(\"size\", Size.create(value));\n\n    this.geometryChange();\n    return this;\n  }\n\n  getSize() {\n    return this.size;\n  }\n\n  width() {\n    return this.size.width;\n  }\n\n  height() {\n    return this.size.height;\n  }\n\n  topLeft() {\n    return this.origin.clone();\n  }\n\n  bottomRight() {\n    return this.origin.clone().translate(this.width(), this.height());\n  }\n\n  topRight() {\n    return this.origin.clone().translate(this.width(), 0);\n  }\n\n  bottomLeft() {\n    return this.origin.clone().translate(0, this.height());\n  }\n\n  center() {\n    return this.origin.clone().translate(this.width() / 2, this.height() / 2);\n  }\n\n  bbox(matrix) {\n    const tl = this.topLeft().transformCopy(matrix);\n    const tr = this.topRight().transformCopy(matrix);\n    const br = this.bottomRight().transformCopy(matrix);\n    const bl = this.bottomLeft().transformCopy(matrix);\n    return Rect.fromPoints(tl, tr, br, bl);\n  }\n\n  transformCopy(m) {\n    return Rect.fromPoints(this.topLeft().transform(m), this.bottomRight().transform(m));\n  }\n\n  expand(x, y = x) {\n    this.size.width += 2 * x;\n    this.size.height += 2 * y;\n    this.origin.translate(-x, -y);\n    return this;\n  }\n\n  expandCopy(x, y) {\n    return this.clone().expand(x, y);\n  }\n\n  containsPoint(point) {\n    const origin = this.origin;\n    const bottomRight = this.bottomRight();\n    return !(point.x < origin.x || point.y < origin.y || bottomRight.x < point.x || bottomRight.y < point.y);\n  }\n\n  _isOnPath(point, width) {\n    const rectOuter = this.expandCopy(width, width);\n    const rectInner = this.expandCopy(-width, -width);\n    return rectOuter.containsPoint(point) && !rectInner.containsPoint(point);\n  }\n\n  static fromPoints() {\n    const topLeft = Point.min.apply(null, arguments);\n    const bottomRight = Point.max.apply(null, arguments);\n    const size = new Size(bottomRight.x - topLeft.x, bottomRight.y - topLeft.y);\n    return new Rect(topLeft, size);\n  }\n\n  static union(a, b) {\n    return Rect.fromPoints(Point.min(a.topLeft(), b.topLeft()), Point.max(a.bottomRight(), b.bottomRight()));\n  }\n\n  static intersect(a, b) {\n    const rect1 = {\n      left: a.topLeft().x,\n      top: a.topLeft().y,\n      right: a.bottomRight().x,\n      bottom: a.bottomRight().y\n    };\n    const rect2 = {\n      left: b.topLeft().x,\n      top: b.topLeft().y,\n      right: b.bottomRight().x,\n      bottom: b.bottomRight().y\n    };\n\n    if (rect1.left <= rect2.right && rect2.left <= rect1.right && rect1.top <= rect2.bottom && rect2.top <= rect1.bottom) {\n      return Rect.fromPoints(new Point(Math.max(rect1.left, rect2.left), Math.max(rect1.top, rect2.top)), new Point(Math.min(rect1.right, rect2.right), Math.min(rect1.bottom, rect2.bottom)));\n    }\n  }\n\n}\n\nexport default Rect;","map":null,"metadata":{},"sourceType":"module"}