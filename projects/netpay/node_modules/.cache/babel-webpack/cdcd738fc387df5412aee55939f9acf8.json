{"ast":null,"code":"import LRUCache from './lru-cache';\nimport { Class } from '../common';\nimport { objectKey, hashKey, normalizeText } from './util';\n\nfunction zeroSize() {\n  return {\n    width: 0,\n    height: 0,\n    baseline: 0\n  };\n}\n\nconst DEFAULT_OPTIONS = {\n  baselineMarkerSize: 1\n};\nlet defaultMeasureBox;\n\nif (typeof document !== \"undefined\") {\n  defaultMeasureBox = document.createElement(\"div\");\n  defaultMeasureBox.style.cssText = \"position: absolute !important; top: -4000px !important; width: auto !important; height: auto !important;\" + \"padding: 0 !important; margin: 0 !important; border: 0 !important;\" + \"line-height: normal !important; visibility: hidden !important; white-space: pre!important;\";\n}\n\nclass TextMetrics extends Class {\n  constructor(options) {\n    super();\n    this._cache = new LRUCache(1000);\n    this.options = Object.assign({}, DEFAULT_OPTIONS, options);\n  }\n\n  measure(text, style, options = {}) {\n    if (typeof text === 'undefined' || text === null) {\n      return zeroSize();\n    }\n\n    const styleKey = objectKey(style);\n    const cacheKey = hashKey(text + styleKey);\n\n    const cachedResult = this._cache.get(cacheKey);\n\n    if (cachedResult) {\n      return cachedResult;\n    }\n\n    const size = zeroSize();\n    const measureBox = options.box || defaultMeasureBox;\n\n    const baselineMarker = this._baselineMarker().cloneNode(false);\n\n    for (let key in style) {\n      let value = style[key];\n\n      if (typeof value !== \"undefined\") {\n        measureBox.style[key] = value;\n      }\n    }\n\n    const textStr = options.normalizeText !== false ? normalizeText(text) : String(text);\n    measureBox.textContent = textStr;\n    measureBox.appendChild(baselineMarker);\n    document.body.appendChild(measureBox);\n\n    if (textStr.length) {\n      size.width = measureBox.offsetWidth - this.options.baselineMarkerSize;\n      size.height = measureBox.offsetHeight;\n      size.baseline = baselineMarker.offsetTop + this.options.baselineMarkerSize;\n    }\n\n    if (size.width > 0 && size.height > 0) {\n      this._cache.put(cacheKey, size);\n    }\n\n    measureBox.parentNode.removeChild(measureBox);\n    return size;\n  }\n\n  _baselineMarker() {\n    const marker = document.createElement(\"div\");\n    marker.style.cssText = \"display: inline-block; vertical-align: baseline;width: \" + this.options.baselineMarkerSize + \"px; height: \" + this.options.baselineMarkerSize + \"px;overflow: hidden;\";\n    return marker;\n  }\n\n}\n\nTextMetrics.current = new TextMetrics();\nexport default TextMetrics;","map":null,"metadata":{},"sourceType":"module"}