{"ast":null,"code":"import BaseSurface from '../core/surface';\nimport RootNode from './root-node';\nimport Group from '../shapes/group';\nimport transform from '../geometry/transform';\nimport renderSVG from './utils/render-svg';\nimport { SVG_NS } from './constants';\nimport { bindEvents, unbindEvents, elementStyles } from '../util';\nimport ArcNode from './arc-node';\nimport CircleNode from './circle-node';\nimport GroupNode from './group-node';\nimport ImageNode from './image-node';\nimport MultiPathNode from './multi-path-node';\nimport PathNode from './path-node';\nimport RectNode from './rect-node';\nimport TextNode from './text-node';\nimport NODE_MAP from './node-map';\nNODE_MAP.Arc = ArcNode;\nNODE_MAP.Circle = CircleNode;\nNODE_MAP.Group = GroupNode;\nNODE_MAP.Image = ImageNode;\nNODE_MAP.MultiPath = MultiPathNode;\nNODE_MAP.Path = PathNode;\nNODE_MAP.Rect = RectNode;\nNODE_MAP.Text = TextNode;\nconst RTL = 'rtl';\n\nfunction alignToScreen(element) {\n  let ctm;\n\n  try {\n    ctm = element.getScreenCTM ? element.getScreenCTM() : null;\n  } catch (e) {} // eslint-disable-line no-empty\n\n\n  if (ctm) {\n    const left = -ctm.e % 1;\n    const top = -ctm.f % 1;\n    const style = element.style;\n\n    if (left !== 0 || top !== 0) {\n      style.left = left + \"px\";\n      style.top = top + \"px\";\n    }\n  }\n}\n\nclass Surface extends BaseSurface {\n  get type() {\n    return \"svg\";\n  }\n\n  constructor(element, options) {\n    super(element, options);\n    this._root = new RootNode(Object.assign({\n      rtl: elementStyles(element, 'direction').direction === RTL\n    }, this.options));\n    renderSVG(this.element, this._template());\n    this._rootElement = this.element.firstElementChild;\n    alignToScreen(this._rootElement);\n\n    this._root.attachTo(this._rootElement);\n\n    bindEvents(this.element, {\n      click: this._click,\n      mouseover: this._mouseenter,\n      mouseout: this._mouseleave,\n      mousemove: this._mousemove\n    });\n    this.resize();\n  }\n\n  destroy() {\n    if (this._root) {\n      this._root.destroy();\n\n      this._root = null;\n      this._rootElement = null;\n      unbindEvents(this.element, {\n        click: this._click,\n        mouseover: this._mouseenter,\n        mouseout: this._mouseleave,\n        mousemove: this._mousemove\n      });\n    }\n\n    super.destroy();\n  }\n\n  translate(offset) {\n    const viewBox = `${Math.round(offset.x)} ${Math.round(offset.y)} ${this._size.width} ${this._size.height}`;\n    this._offset = offset;\n\n    this._rootElement.setAttribute(\"viewBox\", viewBox);\n  }\n\n  draw(element) {\n    super.draw(element);\n\n    this._root.load([element]);\n  }\n\n  clear() {\n    super.clear();\n\n    this._root.clear();\n  }\n\n  svg() {\n    return \"<?xml version='1.0' ?>\" + this._template();\n  }\n\n  exportVisual() {\n    let {\n      _visual: visual,\n      _offset: offset\n    } = this;\n\n    if (offset) {\n      const wrap = new Group();\n      wrap.children.push(visual);\n      wrap.transform(transform().translate(-offset.x, -offset.y));\n      visual = wrap;\n    }\n\n    return visual;\n  }\n\n  _resize() {\n    if (this._offset) {\n      this.translate(this._offset);\n    }\n  }\n\n  _template() {\n    return `<svg style='width: 100%; height: 100%; overflow: hidden;' xmlns='${SVG_NS}' xmlns:xlink='http://www.w3.org/1999/xlink' version='1.1'>${this._root.render()}</svg>`;\n  }\n\n}\n\nexport default Surface;","map":null,"metadata":{},"sourceType":"module"}