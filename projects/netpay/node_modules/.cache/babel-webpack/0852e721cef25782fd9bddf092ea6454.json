{"ast":null,"code":"import LinearGradient from '../gradients/linear-gradient';\nimport RadialGradient from '../gradients/radial-gradient';\nimport LinearGradientNode from './linear-gradient-node';\nimport RadialGradientNode from './radial-gradient-node';\nimport Node from './node';\nimport ClipNode from './clip-node';\n\nclass DefinitionNode extends Node {\n  constructor() {\n    super();\n    this.definitionMap = {};\n  }\n\n  attachTo(domElement) {\n    this.element = domElement;\n  }\n\n  template() {\n    return `<defs>${this.renderChildren()}</defs>`;\n  }\n\n  definitionChange(e) {\n    const {\n      definitions,\n      action\n    } = e;\n\n    if (action === \"add\") {\n      this.addDefinitions(definitions);\n    } else if (action === \"remove\") {\n      this.removeDefinitions(definitions);\n    }\n  }\n\n  createDefinition(type, item) {\n    let nodeType;\n\n    if (type === \"clip\") {\n      nodeType = ClipNode;\n    } else if (type === \"fill\") {\n      if (item instanceof LinearGradient) {\n        nodeType = LinearGradientNode;\n      } else if (item instanceof RadialGradient) {\n        nodeType = RadialGradientNode;\n      }\n    }\n\n    return new nodeType(item);\n  }\n\n  addDefinitions(definitions) {\n    for (let field in definitions) {\n      this.addDefinition(field, definitions[field]);\n    }\n  }\n\n  addDefinition(type, srcElement) {\n    const {\n      element,\n      definitionMap\n    } = this;\n    const id = srcElement.id;\n    const mapItem = definitionMap[id];\n\n    if (!mapItem) {\n      const node = this.createDefinition(type, srcElement);\n      definitionMap[id] = {\n        element: node,\n        count: 1\n      };\n      this.append(node);\n\n      if (element) {\n        node.attachTo(this.element);\n      }\n    } else {\n      mapItem.count++;\n    }\n  }\n\n  removeDefinitions(definitions) {\n    for (let field in definitions) {\n      this.removeDefinition(definitions[field]);\n    }\n  }\n\n  removeDefinition(srcElement) {\n    const definitionMap = this.definitionMap;\n    const id = srcElement.id;\n    const mapItem = definitionMap[id];\n\n    if (mapItem) {\n      mapItem.count--;\n\n      if (mapItem.count === 0) {\n        this.remove(this.childNodes.indexOf(mapItem.element), 1);\n        delete definitionMap[id];\n      }\n    }\n  }\n\n}\n\nexport default DefinitionNode;","map":null,"metadata":{},"sourceType":"module"}