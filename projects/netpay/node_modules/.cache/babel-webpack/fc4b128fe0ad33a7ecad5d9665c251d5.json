{"ast":null,"code":"import { Class } from '../common';\nimport HasObservers from './has-observers';\nimport { defined } from '../util';\nconst toString = {}.toString;\n\nclass OptionsStore extends HasObservers {\n  constructor(options, prefix = \"\") {\n    super();\n    this.prefix = prefix;\n\n    for (let field in options) {\n      let member = options[field];\n      member = this._wrap(member, field);\n      this[field] = member;\n    }\n  }\n\n  get(field) {\n    const parts = field.split(\".\");\n    let result = this;\n\n    while (parts.length && result) {\n      let part = parts.shift();\n      result = result[part];\n    }\n\n    return result;\n  }\n\n  set(field, value) {\n    const current = this.get(field);\n\n    if (current !== value) {\n      this._set(field, this._wrap(value, field));\n\n      this.optionsChange({\n        field: this.prefix + field,\n        value: value\n      });\n    }\n  }\n\n  _set(field, value) {\n    const composite = field.indexOf(\".\") >= 0;\n    let parentObj = this;\n    let fieldName = field;\n\n    if (composite) {\n      const parts = fieldName.split(\".\");\n      let prefix = this.prefix;\n\n      while (parts.length > 1) {\n        fieldName = parts.shift();\n        prefix += fieldName + \".\";\n        let obj = parentObj[fieldName];\n\n        if (!obj) {\n          obj = new OptionsStore({}, prefix);\n          obj.addObserver(this);\n          parentObj[fieldName] = obj;\n        }\n\n        parentObj = obj;\n      }\n\n      fieldName = parts[0];\n    }\n\n    parentObj._clear(fieldName);\n\n    parentObj[fieldName] = value;\n  }\n\n  _clear(field) {\n    const current = this[field];\n\n    if (current && current.removeObserver) {\n      current.removeObserver(this);\n    }\n  }\n\n  _wrap(object, field) {\n    const type = toString.call(object);\n    let wrapped = object;\n\n    if (wrapped !== null && defined(wrapped) && type === \"[object Object]\") {\n      if (!(object instanceof OptionsStore) && !(object instanceof Class)) {\n        wrapped = new OptionsStore(wrapped, this.prefix + field + \".\");\n      }\n\n      wrapped.addObserver(this);\n    }\n\n    return wrapped;\n  }\n\n}\n\nexport default OptionsStore;","map":null,"metadata":{},"sourceType":"module"}