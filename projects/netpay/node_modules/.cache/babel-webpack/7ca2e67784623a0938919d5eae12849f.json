{"ast":null,"code":"import translateToPoint from './translate-to-point';\nimport stackElements from './stack-elements';\n\nfunction getStacks(elements, rect, sizeField) {\n  const maxSize = rect.size[sizeField];\n  const stacks = [];\n  let stack = [];\n  let stackSize = 0;\n  let element, bbox;\n\n  const addElementToStack = function () {\n    stack.push({\n      element: element,\n      bbox: bbox\n    });\n  };\n\n  for (let idx = 0; idx < elements.length; idx++) {\n    element = elements[idx];\n    bbox = element.clippedBBox();\n\n    if (bbox) {\n      let size = bbox.size[sizeField];\n\n      if (stackSize + size > maxSize) {\n        if (stack.length) {\n          stacks.push(stack);\n          stack = [];\n          addElementToStack();\n          stackSize = size;\n        } else {\n          addElementToStack();\n          stacks.push(stack);\n          stack = [];\n          stackSize = 0;\n        }\n      } else {\n        addElementToStack();\n        stackSize += size;\n      }\n    }\n  }\n\n  if (stack.length) {\n    stacks.push(stack);\n  }\n\n  return stacks;\n}\n\nexport default function wrapElements(elements, rect, axis, otherAxis, sizeField) {\n  const stacks = getStacks(elements, rect, sizeField);\n  const origin = rect.origin.clone();\n  const result = [];\n\n  for (let idx = 0; idx < stacks.length; idx++) {\n    let stack = stacks[idx];\n    let startElement = stack[0];\n    origin[otherAxis] = startElement.bbox.origin[otherAxis];\n    translateToPoint(origin, startElement.bbox, startElement.element);\n    startElement.bbox.origin[axis] = origin[axis];\n    stackElements(stack, axis, otherAxis, sizeField);\n    result.push([]);\n\n    for (let elementIdx = 0; elementIdx < stack.length; elementIdx++) {\n      result[idx].push(stack[elementIdx].element);\n    }\n  }\n\n  return result;\n}","map":null,"metadata":{},"sourceType":"module"}