{"ast":null,"code":"import { isString, isDate } from './utils';\n/**\n * @hidden\n * Creates a single arity function which wraps the value based on the provided predicate.\n * @example\n * ```\n * wrapIf(() => ignoreCase) `tolower(${field})`\n * //ignoreCase=true -> tolower(${field})`\n * //ignoreCase=false -> ${field}`\n * ```\n */\n\nexport const wrapIf = predicate => (str, ...args) => predicate() ? `${str[0]}${args[0]}${str[1]}` : args[0];\n/**\n * @hidden\n */\n\nexport const toUTC = date => new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds()));\n/**\n * @hidden\n */\n\nexport const quote = ({\n  field,\n  value,\n  ignoreCase,\n  operator\n}) => ({\n  value: `'${value.replace(/'/g, \"''\")}'`,\n  field,\n  ignoreCase,\n  operator\n});\n/**\n * @hidden\n */\n\nexport const encodeValue = ({\n  field,\n  value,\n  ignoreCase,\n  operator\n}) => ({\n  value: `${encodeURIComponent(value)}`,\n  field,\n  ignoreCase,\n  operator\n});\n/**\n * @hidden\n */\n\nexport const toLower = ({\n  field,\n  value,\n  ignoreCase,\n  operator\n}) => ({\n  field: wrapIf(() => ignoreCase)`tolower(${field})`,\n  value,\n  ignoreCase,\n  operator\n});\n/**\n * @hidden\n */\n\nexport const normalizeField = ({\n  field,\n  value,\n  ignoreCase,\n  operator\n}) => ({\n  value,\n  field: field.replace(/\\./g, \"/\"),\n  ignoreCase,\n  operator\n});\n/**\n * @hidden\n */\n\nexport const isStringValue = x => isString(x.value);\n/**\n * @hidden\n */\n\nexport const isDateValue = x => isDate(x.value);\n/**\n * @hidden\n */\n\nexport const serializeFilters = (map, join) => filter => {\n  const brackets = wrapIf(() => filter.filters.length > 1);\n  return brackets`(${filter.filters.map(map).join(join(filter))})`;\n};","map":null,"metadata":{},"sourceType":"module"}