{"ast":null,"code":"import { isPresent, isString, isArray } from '../utils';\nimport { isCompositeFilterDescriptor } from './filter-descriptor.interface';\n\nconst operatorMap = key => ({\n  \"!=\": \"neq\",\n  \"<\": \"lt\",\n  \"<=\": \"lte\",\n  \"==\": \"eq\",\n  \">\": \"gt\",\n  \">=\": \"gte\",\n  equal: \"eq\",\n  equals: \"eq\",\n  equalto: \"eq\",\n  ge: \"gte\",\n  greater: \"gt\",\n  greaterthan: \"gt\",\n  greaterthanequal: \"gte\",\n  isempty: \"isempty\",\n  isequalto: \"eq\",\n  isgreaterthan: \"gt\",\n  isgreaterthanorequalto: \"gte\",\n  islessthan: \"lt\",\n  islessthanorequalto: \"lte\",\n  isnotempty: \"isnotempty\",\n  isnotequalto: \"neq\",\n  isnull: \"isnull\",\n  le: \"lte\",\n  less: \"lt\",\n  lessthan: \"lt\",\n  lessthanequal: \"lte\",\n  ne: \"neq\",\n  notequal: \"neq\",\n  notequals: \"neq\",\n  notequalto: \"neq\",\n  notsubstringof: \"doesnotcontain\"\n})[key.toLowerCase()] || key;\n\nconst normalizeOperator = descriptor => {\n  if (descriptor.filters) {\n    descriptor.filters = descriptor.filters.map(filter => {\n      const result = Object.assign({}, filter);\n\n      if (!isCompositeFilterDescriptor(filter) && isString(filter.operator)) {\n        result.operator = operatorMap(filter.operator);\n      }\n\n      if (isCompositeFilterDescriptor(filter)) {\n        normalizeOperator(result);\n      }\n\n      return result;\n    });\n  }\n};\n\nconst normalizeDescriptor = descriptor => {\n  if (!isCompositeFilterDescriptor(descriptor)) {\n    return {\n      filters: isArray(descriptor) ? descriptor : [descriptor],\n      logic: \"and\"\n    };\n  }\n\n  return Object.assign({}, descriptor);\n}; // tslint:disable:max-line-length\n\n/**\n * Converts a [FilterDescriptor]({% slug api_kendo-data-query_filterdescriptor %}) into a [CompositeFilterDescriptor]({% slug api_kendo-data-query_compositefilterdescriptor %}). If a `CompositeFilterDescriptor` is passed, no modifications will be made.\n *\n * @param {CompositeFilterDescriptor | FilterDescriptor} descriptor - The descriptor that will be normalized.\n * @returns {CompositeFilterDescriptor} - The normalized descriptor.\n */\n// tslint:enable:max-line-length\n\n\nexport const normalizeFilters = descriptor => {\n  if (isPresent(descriptor)) {\n    descriptor = normalizeDescriptor(descriptor);\n    normalizeOperator(descriptor);\n  }\n\n  return descriptor;\n};","map":null,"metadata":{},"sourceType":"module"}