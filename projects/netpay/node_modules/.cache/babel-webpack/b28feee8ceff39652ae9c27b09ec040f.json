{"ast":null,"code":"import { PRECISION } from '../constants';\nimport { Class } from '../../common';\nimport { round } from '../../util';\n\nclass ComplexNumber extends Class {\n  constructor(real = 0, img = 0) {\n    super();\n    this.real = real;\n    this.img = img;\n  }\n\n  add(cNumber) {\n    return new ComplexNumber(round(this.real + cNumber.real, PRECISION), round(this.img + cNumber.img, PRECISION));\n  }\n\n  addConstant(value) {\n    return new ComplexNumber(this.real + value, this.img);\n  }\n\n  negate() {\n    return new ComplexNumber(-this.real, -this.img);\n  }\n\n  multiply(cNumber) {\n    return new ComplexNumber(this.real * cNumber.real - this.img * cNumber.img, this.real * cNumber.img + this.img * cNumber.real);\n  }\n\n  multiplyConstant(value) {\n    return new ComplexNumber(this.real * value, this.img * value);\n  }\n\n  nthRoot(n) {\n    const rad = Math.atan2(this.img, this.real);\n    const r = Math.sqrt(Math.pow(this.img, 2) + Math.pow(this.real, 2));\n    const nthR = Math.pow(r, 1 / n);\n    return new ComplexNumber(nthR * Math.cos(rad / n), nthR * Math.sin(rad / n)); //Moivre's formula\n  }\n\n  equals(cNumber) {\n    return this.real === cNumber.real && this.img === cNumber.img;\n  }\n\n  isReal() {\n    return this.img === 0;\n  }\n\n}\n\nexport default ComplexNumber;","map":null,"metadata":{},"sourceType":"module"}