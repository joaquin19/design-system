{"ast":null,"code":"import now from '../util/now';\nexport default function throttle(fn, delay) {\n  let lastExecTime = 0;\n  let timeout;\n\n  if (!delay || delay <= 0) {\n    return fn;\n  }\n\n  const throttled = function () {\n    const elapsed = now() - lastExecTime;\n    const args = arguments;\n\n    const exec = function () {\n      fn.apply(null, args);\n      lastExecTime = now();\n    }; // first execution\n\n\n    if (!lastExecTime) {\n      return exec();\n    }\n\n    if (timeout) {\n      clearTimeout(timeout);\n    }\n\n    if (elapsed > delay) {\n      exec();\n    } else {\n      timeout = setTimeout(exec, delay - elapsed);\n    }\n  };\n\n  throttled.cancel = function () {\n    clearTimeout(timeout);\n  };\n\n  return throttled;\n}","map":null,"metadata":{},"sourceType":"module"}