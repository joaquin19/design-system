{"ast":null,"code":"import PathNode from './path-node';\nimport { createPromise } from '../util';\n\nclass ImageNode extends PathNode {\n  constructor(srcElement, cors) {\n    super(srcElement);\n    this.onLoad = this.onLoad.bind(this);\n    this.onError = this.onError.bind(this);\n    this.loading = createPromise();\n    const img = this.img = new Image();\n\n    if (cors && !/^data:/i.test(srcElement.src())) {\n      img.crossOrigin = cors;\n    }\n\n    img.src = srcElement.src();\n\n    if (img.complete) {\n      this.onLoad();\n    } else {\n      img.onload = this.onLoad;\n      img.onerror = this.onError;\n    }\n  }\n\n  renderTo(ctx) {\n    if (this.loading.state() === \"resolved\") {\n      ctx.save();\n      this.setTransform(ctx);\n      this.setClip(ctx);\n      this.drawImage(ctx);\n      ctx.restore();\n    }\n  }\n\n  optionsChange(e) {\n    if (e.field === \"src\") {\n      this.loading = createPromise();\n      this.img.src = this.srcElement.src();\n    } else {\n      super.optionsChange(e);\n    }\n  }\n\n  onLoad() {\n    this.loading.resolve();\n    this.invalidate();\n  }\n\n  onError() {\n    this.loading.reject(new Error(\"Unable to load image '\" + this.img.src + \"'. Check for connectivity and verify CORS headers.\"));\n  }\n\n  drawImage(ctx) {\n    const rect = this.srcElement.rect();\n    const topLeft = rect.topLeft();\n    ctx.drawImage(this.img, topLeft.x, topLeft.y, rect.width(), rect.height());\n  }\n\n}\n\nexport default ImageNode;","map":null,"metadata":{},"sourceType":"module"}