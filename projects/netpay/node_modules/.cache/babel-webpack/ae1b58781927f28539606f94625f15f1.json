{"ast":null,"code":"import withAccessors from '../mixins/with-accessors';\nimport Point from './point';\nimport Rect from './rect';\nimport ellipseExtremeAngles from './math/ellipse-extreme-angles';\nimport HasObservers from '../core/has-observers';\nimport { rad } from '../util';\nconst PI_DIV_2 = Math.PI / 2;\n\nclass Circle extends withAccessors(HasObservers, [\"radius\"]) {\n  constructor(center = new Point(), radius = 0) {\n    super();\n    this.setCenter(center);\n    this.setRadius(radius);\n  }\n\n  setCenter(value) {\n    this._observerField(\"center\", Point.create(value));\n\n    this.geometryChange();\n    return this;\n  }\n\n  getCenter() {\n    return this.center;\n  }\n\n  equals(other) {\n    return other && other.center.equals(this.center) && other.radius === this.radius;\n  }\n\n  clone() {\n    return new Circle(this.center.clone(), this.radius);\n  }\n\n  pointAt(angle) {\n    return this._pointAt(rad(angle));\n  }\n\n  bbox(matrix) {\n    const extremeAngles = ellipseExtremeAngles(this.center, this.radius, this.radius, matrix);\n    let minPoint = Point.maxPoint();\n    let maxPoint = Point.minPoint();\n\n    for (let i = 0; i < 4; i++) {\n      let currentPointX = this._pointAt(extremeAngles.x + i * PI_DIV_2).transformCopy(matrix);\n\n      let currentPointY = this._pointAt(extremeAngles.y + i * PI_DIV_2).transformCopy(matrix);\n\n      let currentPoint = new Point(currentPointX.x, currentPointY.y);\n      minPoint = Point.min(minPoint, currentPoint);\n      maxPoint = Point.max(maxPoint, currentPoint);\n    }\n\n    return Rect.fromPoints(minPoint, maxPoint);\n  }\n\n  _pointAt(angle) {\n    const {\n      center,\n      radius\n    } = this;\n    return new Point(center.x + radius * Math.cos(angle), center.y + radius * Math.sin(angle));\n  }\n\n  containsPoint(point) {\n    const {\n      center,\n      radius\n    } = this;\n    const inCircle = Math.pow(point.x - center.x, 2) + Math.pow(point.y - center.y, 2) <= Math.pow(radius, 2);\n    return inCircle;\n  }\n\n  _isOnPath(point, width) {\n    const {\n      center,\n      radius\n    } = this;\n    const pointDistance = center.distanceTo(point);\n    return radius - width <= pointDistance && pointDistance <= radius + width;\n  }\n\n}\n\nexport default Circle;","map":null,"metadata":{},"sourceType":"module"}