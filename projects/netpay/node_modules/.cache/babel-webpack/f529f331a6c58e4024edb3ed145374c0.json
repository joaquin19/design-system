{"ast":null,"code":"/* tslint:disable:object-literal-sort-keys max-line-length */\nimport { isWindowAvailable } from './util';\nconst agentRxs = {\n  wp: /(Windows Phone(?: OS)?)\\s(\\d+)\\.(\\d+(\\.\\d+)?)/,\n  fire: /(Silk)\\/(\\d+)\\.(\\d+(\\.\\d+)?)/,\n  android: /(Android|Android.*(?:Opera|Firefox).*?\\/)\\s*(\\d+)(\\.(\\d+(\\.\\d+)?))?/,\n  iphone: /(iPhone|iPod).*OS\\s+(\\d+)[\\._]([\\d\\._]+)/,\n  ipad: /(iPad).*OS\\s+(\\d+)[\\._]([\\d_]+)/,\n  meego: /(MeeGo).+NokiaBrowser\\/(\\d+)\\.([\\d\\._]+)/,\n  webos: /(webOS)\\/(\\d+)\\.(\\d+(\\.\\d+)?)/,\n  blackberry: /(BlackBerry|BB10).*?Version\\/(\\d+)\\.(\\d+(\\.\\d+)?)/,\n  playbook: /(PlayBook).*?Tablet\\s*OS\\s*(\\d+)\\.(\\d+(\\.\\d+)?)/,\n  windows: /(MSIE)\\s+(\\d+)\\.(\\d+(\\.\\d+)?)/,\n  tizen: /(tizen).*?Version\\/(\\d+)\\.(\\d+(\\.\\d+)?)/i,\n  sailfish: /(sailfish).*rv:(\\d+)\\.(\\d+(\\.\\d+)?).*firefox/i,\n  ffos: /(Mobile).*rv:(\\d+)\\.(\\d+(\\.\\d+)?).*Firefox/\n};\nconst osRxs = {\n  ios: /^i(phone|pad|pod)$/i,\n  android: /^android|fire$/i,\n  blackberry: /^blackberry|playbook/i,\n  windows: /windows/,\n  wp: /wp/,\n  flat: /sailfish|ffos|tizen/i,\n  meego: /meego/\n};\nconst desktopBrowserRxs = {\n  edge: /(edge)[ \\/]([\\w.]+)/i,\n  webkit: /(chrome)[ \\/]([\\w.]+)/i,\n  safari: /(webkit)[ \\/]([\\w.]+)/i,\n  opera: /(opera)(?:.*version|)[ \\/]([\\w.]+)/i,\n  msie: /(msie\\s|trident.*? rv:)([\\w.]+)/i,\n  mozilla: /(mozilla)(?:.*? rv:([\\w.]+)|)/i\n};\nconst mobileBrowserRxs = {\n  omini: /Opera\\sMini/i,\n  omobile: /Opera\\sMobi/i,\n  firefox: /Firefox|Fennec/i,\n  mobilesafari: /version\\/.*safari/i,\n  ie: /MSIE|Windows\\sPhone/i,\n  chrome: /chrome|crios/i,\n  webkit: /webkit/i\n};\n\nconst testRx = (agent, rxs, dflt) => {\n  for (let rx in rxs) {\n    if (rxs.hasOwnProperty(rx) && rxs[rx].test(agent)) {\n      return rx;\n    }\n  }\n\n  return dflt !== undefined ? dflt : agent;\n};\n/**\n * A function that detects the mobile browser based on the given UserAgent.\n *\n * @param ua - The user agent string.\n * @returns - A browser info object containing the browser type and version.\n *\n * @example\n * ```ts-no-run\n * const userAgent = 'Mozilla/5.0 (Linux; Android 8.0.0) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Focus/1.3 Chrome/61.0.3163.81 Mobile Safari/537.36';\n * detectMobileOS(userAgent); // { android: true };\n * ```\n */\n\n\nexport const detectMobileOS = ua => {\n  let minorVersion;\n  let match = [];\n\n  for (let agent in agentRxs) {\n    if (agentRxs.hasOwnProperty(agent)) {\n      match = ua.match(agentRxs[agent]);\n\n      if (!match) {\n        continue;\n      }\n\n      if (agent === 'windows' && 'plugins' in window.navigator) {\n        return null;\n      } // Break if not Metro/Mobile Windows\n\n\n      const os = {};\n      os.device = agent;\n      os.browser = testRx(ua, mobileBrowserRxs, 'default');\n      os.name = testRx(agent, osRxs);\n      os[os.name] = true;\n      os.majorVersion = match[2];\n      os.minorVersion = match[3] ? match[3].replace('_', '.') : '.0';\n      minorVersion = os.minorVersion.replace('.', '').substr(0, 2);\n      os.flatVersion = os.majorVersion + minorVersion + new Array(3 - (minorVersion.length < 3 ? minorVersion.length : 2)).join('0');\n      os.cordova = typeof window.PhoneGap !== undefined || typeof window.cordova !== undefined; // Use file protocol to detect appModes.\n\n      os.appMode = window.navigator.standalone || /file|local|wmapp/.test(window.location.protocol) || os.cordova; // Use file protocol to detect appModes.\n\n      return os;\n    }\n  }\n\n  return null;\n};\n/**\n * A function that detects the desktop browser based on the given UserAgent.\n *\n * @param ua - The user agent string.\n * @returns - A browser info object containing the browser type and version.\n *\n * @example\n * ```ts-no-run\n * const userAgent = 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_3) AppleWebKit/535.19 (KHTML, like Gecko) Chrome/18.0.1025.151 Safari/535.19';\n * detectDesktopBrowser(userAgent); // { chrome: true, webkit: true };\n * ```\n */\n\nexport const detectDesktopBrowser = ua => {\n  let browserInfo = null;\n  let match = [];\n\n  for (let agent in desktopBrowserRxs) {\n    if (desktopBrowserRxs.hasOwnProperty(agent)) {\n      match = ua.match(desktopBrowserRxs[agent]);\n\n      if (match) {\n        browserInfo = {};\n        browserInfo[agent] = true;\n        browserInfo[match[1].toLowerCase().split(' ')[0].split('/')[0]] = true;\n        browserInfo.version = parseInt(document.documentMode || match[2], 10);\n        break;\n      }\n    }\n  }\n\n  return browserInfo;\n};\nconst userAgent = isWindowAvailable() && window.navigator ? window.navigator.userAgent : null;\n/**\n * A constant holding the desktop browser info. The variable persists the result of the detectDesktopBrowser(window.navigator.userAgent) call.\n * If no desktop browser is detected, the constant will be `null`.\n */\n\nexport const browser = userAgent ? detectDesktopBrowser(userAgent) : null;\n/**\n * A constant holding the mobile OS info. The variable persists the result of the detectMobileOS(window.navigator.userAgent) call.\n * If no mobile OS is detected, the constant will be `null`.\n */\n\nexport const mobileOS = userAgent ? detectMobileOS(userAgent) : null;\n/**\n * A constant reporting the browser `touch` events support.\n */\n\nexport const touch = isWindowAvailable() && 'ontouchstart' in window;\n/**\n * @hidden\n * A constant reporting the browser `msPointers` events support.\n */\n\nexport const msPointers = browser && !browser.chrome && window.MSPointerEvent;\n/**\n * A constant reporting the browser `pointers` events support.\n */\n\nexport const pointers = browser && !browser.chrome && window.PointerEvent;\n/**\n * A constant reporting whether the browser is touch enabled.\n */\n\nexport const touchEnabled = mobileOS && (touch || msPointers || pointers);","map":null,"metadata":{},"sourceType":"module"}