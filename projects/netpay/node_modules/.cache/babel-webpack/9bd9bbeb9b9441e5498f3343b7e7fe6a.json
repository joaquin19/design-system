{"ast":null,"code":"import BaseNode from '../core/base-node';\nimport NODE_MAP from './node-map';\nimport renderPath from './utils/render-path';\nimport { defined } from '../util';\n\nclass Node extends BaseNode {\n  constructor(srcElement) {\n    super(srcElement);\n\n    if (srcElement) {\n      this.initClip();\n    }\n  }\n\n  initClip() {\n    const clip = this.srcElement.clip();\n\n    if (clip) {\n      this.clip = clip;\n      clip.addObserver(this);\n    }\n  }\n\n  clear() {\n    if (this.srcElement) {\n      this.srcElement.removeObserver(this);\n    }\n\n    this.clearClip();\n    super.clear();\n  }\n\n  clearClip() {\n    if (this.clip) {\n      this.clip.removeObserver(this);\n      delete this.clip;\n    }\n  }\n\n  setClip(ctx) {\n    if (this.clip) {\n      ctx.beginPath();\n      renderPath(ctx, this.clip);\n      ctx.clip();\n    }\n  }\n\n  optionsChange(e) {\n    if (e.field === \"clip\") {\n      this.clearClip();\n      this.initClip();\n    }\n\n    super.optionsChange(e);\n  }\n\n  setTransform(ctx) {\n    if (this.srcElement) {\n      const transform = this.srcElement.transform();\n\n      if (transform) {\n        ctx.transform.apply(ctx, transform.matrix().toArray(6));\n      }\n    }\n  }\n\n  loadElements(elements, pos, cors) {\n    for (let i = 0; i < elements.length; i++) {\n      let srcElement = elements[i];\n      let children = srcElement.children;\n      let childNode = new NODE_MAP[srcElement.nodeType](srcElement, cors);\n\n      if (children && children.length > 0) {\n        childNode.load(children, pos, cors);\n      }\n\n      if (defined(pos)) {\n        this.insertAt(childNode, pos);\n      } else {\n        this.append(childNode);\n      }\n    }\n  }\n\n  load(elements, pos, cors) {\n    this.loadElements(elements, pos, cors);\n    this.invalidate();\n  }\n\n  setOpacity(ctx) {\n    if (this.srcElement) {\n      const opacity = this.srcElement.opacity();\n\n      if (defined(opacity)) {\n        this.globalAlpha(ctx, opacity);\n      }\n    }\n  }\n\n  globalAlpha(ctx, value) {\n    let opactity = value;\n\n    if (opactity && ctx.globalAlpha) {\n      opactity *= ctx.globalAlpha;\n    }\n\n    ctx.globalAlpha = opactity;\n  }\n\n  visible() {\n    const src = this.srcElement;\n    return !src || src && src.options.visible !== false;\n  }\n\n}\n\nexport default Node;","map":null,"metadata":{},"sourceType":"module"}