{"ast":null,"code":"import StopsArray from './stops-array';\nimport GradientStop from './gradient-stop';\nimport HasObservers from '../core/has-observers';\nimport { defined, definitionId } from '../util';\n\nclass Gradient extends HasObservers {\n  get nodeType() {\n    return \"Gradient\";\n  }\n\n  constructor(options = {}) {\n    super();\n    this.stops = new StopsArray(this._createStops(options.stops));\n    this.stops.addObserver(this);\n    this._userSpace = options.userSpace;\n    this.id = definitionId();\n  }\n\n  userSpace(value) {\n    if (defined(value)) {\n      this._userSpace = value;\n      this.optionsChange();\n      return this;\n    }\n\n    return this._userSpace;\n  }\n\n  _createStops(stops = []) {\n    const result = [];\n\n    for (let idx = 0; idx < stops.length; idx++) {\n      result.push(GradientStop.create(stops[idx]));\n    }\n\n    return result;\n  }\n\n  addStop(offset, color, opacity) {\n    this.stops.push(new GradientStop(offset, color, opacity));\n  }\n\n  removeStop(stop) {\n    const index = this.stops.indexOf(stop);\n\n    if (index >= 0) {\n      this.stops.splice(index, 1);\n    }\n  }\n\n  optionsChange(e) {\n    this.trigger(\"optionsChange\", {\n      field: \"gradient\" + (e ? \".\" + e.field : \"\"),\n      value: this\n    });\n  }\n\n  geometryChange() {\n    this.optionsChange();\n  }\n\n}\n\nexport default Gradient;","map":null,"metadata":{},"sourceType":"module"}