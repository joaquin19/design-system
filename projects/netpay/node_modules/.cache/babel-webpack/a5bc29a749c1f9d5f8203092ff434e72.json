{"ast":null,"code":"import { Class } from '../common';\nimport defined from '../util/defined';\nimport rad from '../util/rad';\nimport round from '../util/round';\n\nclass Matrix extends Class {\n  constructor(a = 0, b = 0, c = 0, d = 0, e = 0, f = 0) {\n    super();\n    this.a = a;\n    this.b = b;\n    this.c = c;\n    this.d = d;\n    this.e = e;\n    this.f = f;\n  }\n\n  multiplyCopy(matrix) {\n    return new Matrix(this.a * matrix.a + this.c * matrix.b, this.b * matrix.a + this.d * matrix.b, this.a * matrix.c + this.c * matrix.d, this.b * matrix.c + this.d * matrix.d, this.a * matrix.e + this.c * matrix.f + this.e, this.b * matrix.e + this.d * matrix.f + this.f);\n  }\n\n  invert() {\n    const {\n      a,\n      b,\n      c: d,\n      d: e,\n      e: g,\n      f: h\n    } = this;\n    const det = a * e - b * d;\n\n    if (det === 0) {\n      return null;\n    }\n\n    return new Matrix(e / det, -b / det, -d / det, a / det, (d * h - e * g) / det, (b * g - a * h) / det);\n  }\n\n  clone() {\n    return new Matrix(this.a, this.b, this.c, this.d, this.e, this.f);\n  }\n\n  equals(other) {\n    if (!other) {\n      return false;\n    }\n\n    return this.a === other.a && this.b === other.b && this.c === other.c && this.d === other.d && this.e === other.e && this.f === other.f;\n  }\n\n  round(precision) {\n    this.a = round(this.a, precision);\n    this.b = round(this.b, precision);\n    this.c = round(this.c, precision);\n    this.d = round(this.d, precision);\n    this.e = round(this.e, precision);\n    this.f = round(this.f, precision);\n    return this;\n  }\n\n  toArray(precision) {\n    const result = [this.a, this.b, this.c, this.d, this.e, this.f];\n\n    if (defined(precision)) {\n      for (let i = 0; i < result.length; i++) {\n        result[i] = round(result[i], precision);\n      }\n    }\n\n    return result;\n  }\n\n  toString(precision, separator = \",\") {\n    return this.toArray(precision).join(separator);\n  }\n\n  static translate(x, y) {\n    return new Matrix(1, 0, 0, 1, x, y);\n  }\n\n  static unit() {\n    return new Matrix(1, 0, 0, 1, 0, 0);\n  }\n\n  static rotate(angle, x, y) {\n    const matrix = new Matrix();\n    matrix.a = Math.cos(rad(angle));\n    matrix.b = Math.sin(rad(angle));\n    matrix.c = -matrix.b;\n    matrix.d = matrix.a;\n    matrix.e = x - x * matrix.a + y * matrix.b || 0;\n    matrix.f = y - y * matrix.a - x * matrix.b || 0;\n    return matrix;\n  }\n\n  static scale(scaleX, scaleY) {\n    return new Matrix(scaleX, 0, 0, scaleY, 0, 0);\n  }\n\n}\n\nMatrix.IDENTITY = Matrix.unit();\nexport default Matrix;","map":null,"metadata":{},"sourceType":"module"}