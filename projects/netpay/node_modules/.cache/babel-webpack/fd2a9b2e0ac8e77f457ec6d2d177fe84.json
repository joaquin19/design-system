{"ast":null,"code":"import { cldr } from './info';\nimport { CURRENCY, ACCOUNTING, DECIMAL, CURRENCY_PLACEHOLDER, NUMBER_PLACEHOLDER, LIST_SEPARATOR, GROUP_SEPARATOR, POINT } from '../common/constants';\nconst LATIN_NUMBER_FORMATS = \"Formats-numberSystem-latn\";\nconst LATIN_NUMBER_SYMBOLS = \"symbols-numberSystem-latn\";\nconst patternRegExp = /([#,0.]+)/g;\nconst cldrCurrencyRegExp = /Â¤/g;\n\nfunction getPatterns(pattern) {\n  patternRegExp.lastIndex = 0;\n  return pattern.replace(cldrCurrencyRegExp, CURRENCY_PLACEHOLDER).replace(patternRegExp, NUMBER_PLACEHOLDER).split(LIST_SEPARATOR);\n}\n\nfunction getGroupSize(pattern) {\n  patternRegExp.lastIndex = 0;\n  const numberPatterns = patternRegExp.exec(pattern.split(LIST_SEPARATOR)[0])[0].split(POINT);\n  const integer = numberPatterns[0];\n  const groupSize = integer.split(GROUP_SEPARATOR).slice(1).map(function (group) {\n    return group.length;\n  }).reverse();\n  return groupSize;\n}\n\nfunction loadCurrencyUnitPatterns(currencyInfo, currencyFormats) {\n  for (let field in currencyFormats) {\n    if (field.startsWith(\"unitPattern\")) {\n      currencyInfo[field] = currencyFormats[field].replace(\"{0}\", NUMBER_PLACEHOLDER).replace(\"{1}\", CURRENCY_PLACEHOLDER);\n    }\n  }\n}\n\nexport default function loadNumbersInfo(locale, info) {\n  const localeInfo = cldr[locale];\n  const numbers = localeInfo.numbers = localeInfo.numbers || {};\n  numbers.symbols = numbers.symbols || {};\n\n  for (let field in info) {\n    if (field === LATIN_NUMBER_SYMBOLS) {\n      Object.assign(numbers.symbols, info[field]);\n    } else if (field.includes(LATIN_NUMBER_FORMATS)) {\n      const style = field.substr(0, field.indexOf(LATIN_NUMBER_FORMATS));\n      const pattern = info[field].standard;\n      numbers[style] = {\n        patterns: getPatterns(pattern)\n      };\n\n      if (style === CURRENCY) {\n        numbers[style].groupSize = getGroupSize((info[DECIMAL + LATIN_NUMBER_FORMATS] || info[field]).standard);\n        loadCurrencyUnitPatterns(numbers[style], info[field]);\n        numbers[ACCOUNTING] = {\n          patterns: getPatterns(info[field][ACCOUNTING]),\n          groupSize: numbers[style].groupSize\n        };\n      } else {\n        numbers[style].groupSize = getGroupSize(pattern);\n      }\n    } else if (field === \"currencies\") {\n      numbers.currencies = info[field];\n    }\n  }\n}","map":null,"metadata":{},"sourceType":"module"}