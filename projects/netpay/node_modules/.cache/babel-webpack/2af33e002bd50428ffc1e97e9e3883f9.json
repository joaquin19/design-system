{"ast":null,"code":"import { MS_PER_HOUR, MS_PER_MINUTE } from '../constants';\nimport { cloneDate } from '../clone-date';\nimport { abbrTimezone } from './abbr-timezone';\nimport { offset } from './offset';\nimport { toLocalDate } from './to-local-date';\n\nconst addMinutes = (date, minutes) => new Date(date.getTime() + minutes * MS_PER_MINUTE);\n\nconst addHours = (date, hours) => new Date(date.getTime() + hours * MS_PER_HOUR);\n\nconst dayAbbr = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\nconst monthAbbr = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dev'];\n\nconst datePrefix = utcDate => dayAbbr[utcDate.getUTCDay()] + ' ' + monthAbbr[utcDate.getUTCMonth()];\n\nconst padNumber = (num, len = 2) => {\n  const sign = num < 0 ? '-' : '';\n  return sign + new Array(len).concat([Math.abs(num)]).join('0').slice(-len);\n};\n\nfunction isZoneMissingHour(date, timezone) {\n  const currentOffset = offset(timezone, date);\n  const prevHour = addHours(date, -1);\n  const prevOffset = offset(timezone, prevHour);\n  return currentOffset < prevOffset;\n}\n\nfunction shiftZoneMissingHour(utcDate, timezone) {\n  // Adjust for missing hour during DST transition in timezone.\n  const dstOffset = isZoneMissingHour(utcDate, timezone) ? 1 : 0;\n  return addHours(utcDate, dstOffset);\n}\n\nfunction convertTimezoneUTC(utcLocal, fromTimezone, toTimezone) {\n  if (fromTimezone === toTimezone) {\n    return utcLocal;\n  }\n\n  const fromOffset = offset(fromTimezone, utcLocal);\n  const toOffset = offset(toTimezone, utcLocal);\n  const baseDiff = fromOffset - toOffset;\n  const midDate = addMinutes(utcLocal, baseDiff);\n  const midOffset = offset(toTimezone, midDate);\n  const dstDiff = toOffset - midOffset;\n  return addMinutes(utcLocal, baseDiff + dstDiff);\n}\n\nfunction formatOffset(tzOffset) {\n  const sign = tzOffset <= 0 ? '+' : '-';\n  const value = Math.abs(tzOffset);\n  const hours = padNumber(Math.floor(value / 60));\n  const minutes = padNumber(value % 60);\n  return `GMT${sign}${hours}${minutes}`;\n}\n/**\n * Represents a local date in a specified timezone.\n *\n * The following example demonstrates how to convert a local date to the specified timezone.\n *\n * @example\n * ```ts-no-run\n * import { ZonedDate } from '@progress/kendo-date-math';\n * import '@progress/kendo-date-math/tz/America/New_York';\n *\n * const date = new Date('2018-03-13T00:00:00Z');\n * const tzDate = ZonedDate.fromLocalDate(date, 'America/New_York');\n *\n * // If you run this example in GMT+0200,\n * // the output will be '2018-03-12T22:00:00.000Z'.\n * console.log(tzDate.toISOString());\n * ```\n *\n * The following example demonstrates how to convert between timezones.\n *\n * @example\n * ```ts-no-run\n * import { ZonedDate } from '@progress/kendo-date-math';\n * import '@progress/kendo-date-math/tz/America/New_York';\n * import '@progress/kendo-date-math/tz/America/Los_Angeles';\n *\n * // Note the \"Z\" suffix for UTC dates.\n * const date = new Date('2018-03-12T22:00:00Z');\n *\n * const tzDate = ZonedDate.fromLocalDate(date, 'America/New_York');\n * const result = tzDate.toTimezone('America/Los_Angeles');\n *\n * // Regardless of the browser timezone\n * // the output will be '2018-03-12T15:00:00.000Z'.\n * console.log(tzDate.toUTCDate());\n * ```\n */\n\n\nexport class ZonedDate {\n  /**\n   * Returns a cached local date that denotes the exact time in the set timezone.\n   *\n   * @return Date - A local date that denotes the exact time in the set timezone.\n   *\n   * This property is an alternative to `toLocalDate()` that returns a cached value instead of cloning it.\n   *\n   * > Modifying the returned instance will corrupt the `ZonedDate` state.\n   */\n  get cachedLocalDate() {\n    return this._localDate;\n  }\n  /**\n   * Returns a cached `Date` instance with UTC date parts that are set to the local time in the set timezone.\n   *\n   * @returns Date - A `Date` with UTC date parts that are set to the local time in the set timezone.\n   *\n   * This property is an alternative to `toUTCDate()` that returns a cached value instead of cloning it.\n   *\n   * > Modifying the returned instance will corrupt the `ZonedDate` state.\n   */\n\n\n  get cachedUTCDate() {\n    return this._utcDate;\n  } // tslint:disable:max-line-length\n\n  /**\n   * Converts an existing date to a specified timezone.\n   *\n   * If the `timezone` parameter is omitted, the `ZonedDate` defaults to the timezone of the browser. This concept is known as \"floating date\" because it does not represent a particular moment in time. Instead, its actual value depends on the current timezone of the browser.\n   *\n   * @param date - The local date that represents the actual time instance.\n   * @param timezone - The ID of the timezone that will be assumed. For example, `Europe/Sofia`.\n   * @return ZonedDate - The date in the specified timezone.\n   *\n   * @example\n   * ```ts-no-run\n   * import { ZonedDate } from '@progress/kendo-date-math';\n   * import '@progress/kendo-date-math/tz/America/New_York';\n   *\n   * const date = new Date('2018-03-13T00:00:00');\n   * const tzDate = ZonedDate.fromLocalDate(date, 'America/New_York');\n   *\n   * // If you run this example in GMT+0200,\n   * // the output will be 'Mon Mar 12 2018 18:00:00 GMT+0200 (EET)'.\n   * console.log(tzDate.toString());\n   *\n   * // If you run this example in UTC,\n   * // the output will be '2018-03-12T22:00:00.000Z'.\n   * console.log(tzDate.toISOString());\n   * ```\n   */\n  // tslint:enable:max-line-length\n\n\n  static fromLocalDate(date, timezone = '') {\n    const utcDate = convertTimezoneUTC(date, 'Etc/UTC', timezone);\n    const shiftZone = isZoneMissingHour(utcDate, timezone);\n    const zoneOffset = offset(timezone, utcDate);\n    let fixedOffset = 0;\n\n    if (shiftZone) {\n      // Adjust for the missing hour during the DST transition in the timezone.\n      fixedOffset = zoneOffset > 0 ? -1 : 1;\n    }\n\n    const adjDate = addHours(utcDate, fixedOffset);\n    return ZonedDate.fromUTCDate(adjDate, timezone);\n  } // tslint:disable:max-line-length\n\n  /**\n   * Creates a date in a specific timezone from the UTC date parts of the supplied `Date`.\n   *\n   * If the `timezone` parameter is omitted, the `ZonedDate` defaults to the timezone of the browser. This concept is known as \"floating date\" because it does not represent a particular moment in time. Instead, its actual value depends on the current timezone of the browser.\n   *\n   * @param date - The UTC date that represents the time in the target zone. This time is not the actual time instant in UTC.\n   * @param timezone - The ID of the timezone that will be assumed. For example, `Europe/Sofia`.\n   * @return ZonedDate - The date in the specified timezone.\n   *\n   * @example\n   * ```ts-no-run\n   * import { ZonedDate } from '@progress/kendo-date-math';\n   * import '@progress/kendo-date-math/tz/America/New_York';\n   *\n   * // Note the \"Z\" suffix for UTC dates.\n   * const date = new Date('2018-03-12T18:00:00Z');\n   *\n   * // Alternative syntax using Date.UTC\n   * // const date = new Date(Date.UTC(2018, 2, 12, 18, 0));\n   *\n   * const tzDate = ZonedDate.fromUTCDate(date, 'America/New_York');\n   *\n   * // Regardless of the browser timezone\n   * // the output will be 'Mon Mar 12 2018 18:00:00 GMT+0200 (EET)'.\n   * console.log(tzDate.toString());\n   *\n   * // Regardless of the browser timezone\n   * // the output in UTC will be '2018-03-12T22:00:00.000Z'.\n   * console.log(tzDate.toISOString());\n   * ```\n   */\n  // tslint:enable:max-line-length\n\n\n  static fromUTCDate(utcDate, timezone = '') {\n    return new ZonedDate(utcDate, timezone);\n  }\n  /**\n   * Returns a local date that denotes the exact time in the set timezone.\n   *\n   * @return Date - A local date that denotes the exact time in the set timezone.\n   *\n   * @example\n   * ```ts-no-run\n   * import { ZonedDate } from '@progress/kendo-date-math';\n   * import '@progress/kendo-date-math/tz/America/New_York';\n   *\n   * // Note the \"Z\" suffix for UTC dates.\n   * const date = new Date('2018-03-12T18:00:00Z');\n   * const tzDate = ZonedDate.fromUTCDate(date, 'America/New_York');\n   *\n   * // The local date represents the same moment in time as the ZonedDate:\n   * // `2018-03-12T22:00:00.000Z`.\n   * console.log(tzDate.toLocalDate().toISOString());\n   *\n   * // The local date will apply the timezone of the browser. For example,\n   * // `Tue Mar 13 2018 00:00:00 GMT+0200 (Eastern European Standard Time)`.\n   * console.log(tzDate.toLocalDate().toString())\n   * ```\n   */\n\n\n  toLocalDate() {\n    return cloneDate(this._localDate);\n  }\n  /**\n   * Returns a `Date` instance with UTC date parts that are set to the local time in the set timezone.\n   *\n   * @returns Date - A `Date` with UTC date parts that are set to the local time in the set timezone.\n   *\n   * @example\n   * ```ts-no-run\n   * import { ZonedDate } from '@progress/kendo-date-math';\n   * import '@progress/kendo-date-math/tz/America/New_York';\n   *\n   * // Note the \"Z\" suffix for UTC dates.\n   * const date = new Date('2018-03-12T18:00:00Z');\n   * const tzDate = ZonedDate.fromUTCDate(date, 'America/New_York');\n   *\n   * // Regardless of the browser timezone\n   * // the output will be '2018-03-12T18:00:00.000Z'.\n   * console.log(tzDate.toUTCDate());\n   * ```\n   */\n\n\n  toUTCDate() {\n    return cloneDate(this._utcDate);\n  }\n  /**\n   * Converts the date to the specified timezone.\n   *\n   * @param toTimezone - The timezone to which the values will be converted. For example, `America/Los_Angeles`.\n   * @returns ZonedDate - The resulting zoned date.\n   *\n   * @example\n   * ```ts-no-run\n   * import { ZonedDate } from '@progress/kendo-date-math';\n   * import '@progress/kendo-date-math/tz/America/New_York';\n   * import '@progress/kendo-date-math/tz/America/Los_Angeles';\n   *\n   * // Note the \"Z\" suffix for UTC dates.\n   * const date = new Date('2018-03-12T22:00:00Z');\n   *\n   * const tzDate = ZonedDate.fromLocalDate(date, 'America/New_York');\n   * const result = tzDate.toTimezone('America/Los_Angeles');\n   *\n   * // Regardless of the browser timezone\n   * // the output will be '2018-03-12T15:00:00.000Z'.\n   * console.log(tzDate.toUTCDate());\n   * ```\n   */\n\n\n  toTimezone(toTimezone) {\n    if (this.timezone === toTimezone) {\n      return this.clone();\n    }\n\n    const tzOffset = offset(this.timezone, this._utcDate);\n    const date = addMinutes(this._utcDate, tzOffset);\n    return ZonedDate.fromLocalDate(date, toTimezone);\n  }\n  /**\n   * Returns a new instance that represents the same date.\n   *\n   * @returns Date - A copy of the instance of the current zoned date.\n   */\n\n\n  clone() {\n    return ZonedDate.fromUTCDate(this._utcDate, this.timezone);\n  } // tslint:disable:max-line-length\n\n  /**\n   * Adds the specified number of days and returns a new instance with the resulting date in the same timezone.\n   *\n   * @param days - The number of days that will be added.\n   * @returns ZonedDate - The resulting date.\n   */\n  // tslint:enable:max-line-length\n\n\n  addDays(days) {\n    const newDate = new Date(this._utcDate.getTime());\n    newDate.setUTCDate(newDate.getUTCDate() + days);\n    return ZonedDate.fromUTCDate(newDate, this.timezone);\n  } // tslint:disable:max-line-length\n\n  /**\n   * Adds the specified number of milliseconds and returns a new instance with the resulting date in the same timezone.\n   *\n   * The method compensates for DST transitions and ensures that the resulting date occurs exactly after the set amount of time in the timezone.\n   *\n   * @param milliseconds - The number of days that will be added.\n   * @returns ZonedDate - The resulting date.\n   */\n  // tslint:enable:max-line-length\n\n\n  addTime(milliseconds) {\n    const utcDate = new Date(this._utcDate.getTime());\n    const utcMid = shiftZoneMissingHour(utcDate, this.timezone);\n    utcMid.setTime(utcMid.getTime() + milliseconds);\n    const utcResult = shiftZoneMissingHour(utcMid, this.timezone);\n    return ZonedDate.fromUTCDate(utcResult, this.timezone);\n  } // tslint:disable:max-line-length\n\n  /**\n   * Returns a new instance of the same zoned date having its time parts set to `00:00:00.000`.\n   *\n   * @returns ZonedDate - The same date having its time parts set to `00:00:00.000`.\n   */\n  // tslint:enable:max-line-length\n\n\n  stripTime() {\n    const date = this._utcDate;\n    const ticks = Date.UTC(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate(), 0, 0, 0);\n    return ZonedDate.fromUTCDate(new Date(ticks), this.timezone);\n  }\n  /**\n   * @hidden\n   */\n\n\n  getTime() {\n    return this._localDate.getTime();\n  }\n  /**\n   * @hidden\n   */\n\n\n  getTimezoneOffset() {\n    return this.timezoneOffset;\n  }\n  /**\n   * @hidden\n   */\n\n\n  getFullYear() {\n    return this._utcDate.getUTCFullYear();\n  }\n  /**\n   * @hidden\n   */\n\n\n  getMonth() {\n    return this._utcDate.getUTCMonth();\n  }\n  /**\n   * @hidden\n   */\n\n\n  getDate() {\n    return this._utcDate.getUTCDate();\n  }\n  /**\n   * @hidden\n   */\n\n\n  getDay() {\n    return this._utcDate.getUTCDay();\n  }\n  /**\n   * @hidden\n   */\n\n\n  getHours() {\n    return this._utcDate.getUTCHours();\n  }\n  /**\n   * @hidden\n   */\n\n\n  getMinutes() {\n    return this._utcDate.getUTCMinutes();\n  }\n  /**\n   * @hidden\n   */\n\n\n  getSeconds() {\n    return this._utcDate.getUTCSeconds();\n  }\n  /**\n   * @hidden\n   */\n\n\n  getMilliseconds() {\n    return this._utcDate.getUTCMilliseconds();\n  } // The local date UTC parts represent actual UTC time\n\n  /**\n   * @hidden\n   */\n\n\n  getUTCDate() {\n    return this._localDate.getUTCDate();\n  }\n  /**\n   * @hidden\n   */\n\n\n  getUTCDay() {\n    return this._localDate.getUTCDay();\n  }\n  /**\n   * @hidden\n   */\n\n\n  getUTCFullYear() {\n    return this._localDate.getUTCFullYear();\n  }\n  /**\n   * @hidden\n   */\n\n\n  getUTCHours() {\n    return this._localDate.getUTCHours();\n  }\n  /**\n   * @hidden\n   */\n\n\n  getUTCMilliseconds() {\n    return this._localDate.getUTCMilliseconds();\n  }\n  /**\n   * @hidden\n   */\n\n\n  getUTCMinutes() {\n    return this._localDate.getUTCMinutes();\n  }\n  /**\n   * @hidden\n   */\n\n\n  getUTCMonth() {\n    return this._localDate.getUTCMonth();\n  }\n  /** @hidden */\n\n\n  getUTCSeconds() {\n    return this._localDate.getUTCSeconds();\n  }\n  /** @hidden */\n\n\n  setTime(time) {\n    throw new Error(\"Method not implemented.\");\n  }\n  /** @hidden */\n\n\n  setMilliseconds(ms) {\n    throw new Error(\"Method not implemented.\");\n  }\n  /** @hidden */\n\n\n  setUTCMilliseconds(ms) {\n    throw new Error(\"Method not implemented.\");\n  }\n  /** @hidden */\n\n\n  setSeconds(sec, ms) {\n    throw new Error(\"Method not implemented.\");\n  }\n  /** @hidden */\n\n\n  setUTCSeconds(sec, ms) {\n    throw new Error(\"Method not implemented.\");\n  }\n  /** @hidden */\n\n\n  setMinutes(min, sec, ms) {\n    throw new Error(\"Method not implemented.\");\n  }\n  /** @hidden */\n\n\n  setUTCMinutes(min, sec, ms) {\n    throw new Error(\"Method not implemented.\");\n  }\n  /** @hidden */\n\n\n  setHours(hours, min, sec, ms) {\n    throw new Error(\"Method not implemented.\");\n  }\n  /** @hidden */\n\n\n  setUTCHours(hours, min, sec, ms) {\n    throw new Error(\"Method not implemented.\");\n  }\n  /** @hidden */\n\n\n  setDate(date) {\n    throw new Error(\"Method not implemented.\");\n  }\n  /** @hidden */\n\n\n  setUTCDate(date) {\n    throw new Error(\"Method not implemented.\");\n  }\n  /** @hidden */\n\n\n  setMonth(month, date) {\n    throw new Error(\"Method not implemented.\");\n  }\n  /** @hidden */\n\n\n  setUTCMonth(month, date) {\n    throw new Error(\"Method not implemented.\");\n  }\n  /** @hidden */\n\n\n  setFullYear(year, month, date) {\n    throw new Error(\"Method not implemented.\");\n  }\n  /** @hidden */\n\n\n  setUTCFullYear(year, month, date) {\n    throw new Error(\"Method not implemented.\");\n  }\n  /**\n   * @hidden\n   */\n\n\n  toISOString() {\n    return this._localDate.toISOString();\n  }\n  /**\n   * @hidden\n   */\n\n\n  toJSON() {\n    return this._localDate.toJSON();\n  }\n  /**\n   * @hidden\n   */\n\n\n  toString() {\n    const dateString = datePrefix(this._utcDate);\n    const timeString = this.toTimeString();\n    return `${dateString} ${this.getDate()} ${this.getFullYear()} ${timeString}`;\n  }\n  /** @hidden */\n\n\n  toDateString() {\n    return toLocalDate(this._utcDate).toDateString();\n  }\n  /** @hidden */\n\n\n  toTimeString() {\n    const hours = padNumber(this.getHours());\n    const minutes = padNumber(this.getMinutes());\n    const seconds = padNumber(this.getSeconds());\n    const time = `${hours}:${minutes}:${seconds}`;\n    const tzOffset = formatOffset(this.timezoneOffset);\n    let abbrev = abbrTimezone(this.timezone, this._utcDate);\n\n    if (abbrev) {\n      abbrev = ` (${abbrev})`;\n    }\n\n    return `${time} ${tzOffset}${abbrev}`;\n  }\n\n  toLocaleString(locales, options) {\n    return this._localDate.toLocaleString(locales, options);\n  }\n\n  toLocaleDateString(locales, options) {\n    return this._localDate.toLocaleDateString(locales, options);\n  }\n\n  toLocaleTimeString(locales, options) {\n    return this._localDate.toLocaleTimeString(locales, options);\n  }\n  /** @hidden */\n\n\n  toUTCString() {\n    return this.toTimezone('Etc/UTC').toString();\n  }\n\n  [Symbol.toPrimitive](hint) {\n    if (hint === 'string' || hint === 'default') {\n      return this.toString();\n    }\n\n    return this._localDate.getTime();\n  }\n  /** @hidden */\n\n\n  valueOf() {\n    return this.getTime();\n  }\n  /** @hidden */\n\n\n  getVarDate() {\n    throw new Error('Not implemented.');\n  }\n  /** @hidden */\n\n\n  format(_) {\n    throw new Error('Not implemented.');\n  }\n  /** @hidden */\n\n\n  formatUTC(_) {\n    throw new Error('Not implemented.');\n  } // The constructor is aliased as a static fromUTCDate method\n  // to clarify the meaning of the utcDate parameter.\n  //\n  // It can be confused for a local date time while it is in fact\n  // treated as a UTC date that represents the local date in the timezone.\n\n\n  constructor(utcDate, timezone) {\n    this._utcDate = cloneDate(utcDate);\n    this.timezone = timezone;\n    const tzOffset = offset(timezone, utcDate);\n    this.timezoneOffset = tzOffset;\n    let localDate = shiftZoneMissingHour(utcDate, timezone);\n    this._localDate = convertTimezoneUTC(localDate, timezone, 'Etc/UTC');\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}