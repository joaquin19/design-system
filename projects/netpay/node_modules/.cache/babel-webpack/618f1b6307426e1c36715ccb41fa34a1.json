{"ast":null,"code":"import { localeInfo, firstDay } from '../cldr';\nimport { DEFAULT_LOCALE, EMPTY } from '../common/constants';\nimport formatString from '../common/format-string';\nimport datePattern from './date-pattern';\nimport formatNames from './format-names';\nimport pad from '../common/pad';\nimport isDate from '../common/is-date';\nimport { dateFormatRegExp } from './constants';\n\nfunction formatDayOfWeekIndex(day, formatLength, localeInfo) {\n  const firstDayIndex = firstDay(localeInfo);\n  let dayIndex;\n\n  if (day < firstDayIndex) {\n    dayIndex = 7 - firstDayIndex + day;\n  } else {\n    dayIndex = day - firstDayIndex;\n  }\n\n  return dayIndex + 1;\n}\n\nfunction formatMonth(month, formatLength, info, standAlone) {\n  if (formatLength <= 2) {\n    return pad(month + 1, formatLength);\n  }\n\n  return formatNames(info, \"months\", formatLength, standAlone)[month];\n}\n\nfunction formatQuarter(date, formatLength, info, standAlone) {\n  const quarter = Math.floor(date.getMonth() / 3);\n\n  if (formatLength < 3) {\n    return quarter + 1;\n  }\n\n  return formatNames(info, \"quarters\", formatLength, standAlone)[quarter];\n}\n\nfunction formatTimeZone(date, info, options) {\n  const {\n    shortHours,\n    optionalMinutes,\n    separator,\n    localizedName,\n    zZeroOffset\n  } = options;\n  const offset = date.getTimezoneOffset() / 60;\n\n  if (offset === 0 && zZeroOffset) {\n    return \"Z\";\n  }\n\n  const sign = offset <= 0 ? \"+\" : \"-\";\n  const hoursMinutes = Math.abs(offset).toString().split(\".\");\n  const minutes = hoursMinutes[1] || 0;\n  let result = sign + (shortHours ? hoursMinutes[0] : pad(hoursMinutes[0], 2));\n\n  if (minutes || !optionalMinutes) {\n    result += (separator ? \":\" : EMPTY) + pad(minutes, 2);\n  }\n\n  if (localizedName) {\n    const localizedFormat = offset === 0 ? info.calendar.gmtZeroFormat : info.calendar.gmtFormat;\n    result = formatString(localizedFormat, result);\n  }\n\n  return result;\n}\n\nfunction formatDayOfWeek(date, formatLength, info, standAlone) {\n  let result;\n\n  if (formatLength < 3) {\n    result = formatDayOfWeekIndex(date.getDay(), formatLength, info);\n  } else {\n    result = formatNames(info, \"days\", formatLength, standAlone)[date.getDay()];\n  }\n\n  return result;\n}\n\nconst formatters = {};\n\nformatters.d = function (date, formatLength) {\n  return pad(date.getDate(), formatLength);\n};\n\nformatters.E = function (date, formatLength, info) {\n  return formatNames(info, \"days\", formatLength)[date.getDay()];\n};\n\nformatters.M = function (date, formatLength, info) {\n  return formatMonth(date.getMonth(), formatLength, info, false);\n};\n\nformatters.L = function (date, formatLength, info) {\n  return formatMonth(date.getMonth(), formatLength, info, true);\n};\n\nformatters.y = function (date, formatLength) {\n  let year = date.getFullYear();\n\n  if (formatLength === 2) {\n    year = year % 100;\n  }\n\n  return pad(year, formatLength);\n};\n\nformatters.h = function (date, formatLength) {\n  const hours = date.getHours() % 12 || 12;\n  return pad(hours, formatLength);\n};\n\nformatters.H = function (date, formatLength) {\n  return pad(date.getHours(), formatLength);\n};\n\nformatters.k = function (date, formatLength) {\n  return pad(date.getHours() || 24, formatLength);\n};\n\nformatters.K = function (date, formatLength) {\n  return pad(date.getHours() % 12, formatLength);\n};\n\nformatters.m = function (date, formatLength) {\n  return pad(date.getMinutes(), formatLength);\n};\n\nformatters.s = function (date, formatLength) {\n  return pad(date.getSeconds(), formatLength);\n};\n\nformatters.S = function (date, formatLength) {\n  const milliseconds = date.getMilliseconds();\n  let result;\n\n  if (milliseconds !== 0) {\n    result = pad(String(milliseconds / 1000).split(\".\")[1].substr(0, formatLength), formatLength, true);\n  } else {\n    result = pad(EMPTY, formatLength);\n  }\n\n  return result;\n};\n\nformatters.a = function (date, formatLength, info) {\n  return formatNames(info, \"dayPeriods\", formatLength)[date.getHours() < 12 ? \"am\" : \"pm\"];\n};\n\nformatters.z = function (date, formatLength, info) {\n  return formatTimeZone(date, info, {\n    shortHours: formatLength < 4,\n    optionalMinutes: formatLength < 4,\n    separator: true,\n    localizedName: true\n  });\n};\n\nformatters.Z = function (date, formatLength, info) {\n  return formatTimeZone(date, info, {\n    separator: formatLength > 3,\n    localizedName: formatLength === 4,\n    zZeroOffset: formatLength === 5\n  });\n};\n\nformatters.x = function (date, formatLength, info) {\n  return formatTimeZone(date, info, {\n    optionalMinutes: formatLength === 1,\n    separator: formatLength === 3 || formatLength === 5\n  });\n};\n\nformatters.X = function (date, formatLength, info) {\n  return formatTimeZone(date, info, {\n    optionalMinutes: formatLength === 1,\n    separator: formatLength === 3 || formatLength === 5,\n    zZeroOffset: true\n  });\n};\n\nformatters.G = function (date, formatLength, info) {\n  let era = date.getFullYear() >= 0 ? 1 : 0;\n  return formatNames(info, \"eras\", formatLength)[era];\n};\n\nformatters.e = formatDayOfWeek;\n\nformatters.c = function (date, formatLength, info) {\n  return formatDayOfWeek(date, formatLength, info, true);\n};\n\nformatters.q = function (date, formatLength, info) {\n  return formatQuarter(date, formatLength, info, true);\n};\n\nformatters.Q = formatQuarter;\nexport default function formatDate(date, format, locale = DEFAULT_LOCALE) {\n  if (!isDate(date)) {\n    if (date === undefined || date === null) {\n      return EMPTY;\n    }\n\n    return date;\n  }\n\n  const info = localeInfo(locale);\n  const pattern = datePattern(format, info);\n  return pattern.replace(dateFormatRegExp, function (match) {\n    let formatLength = match.length;\n    let result;\n\n    if (match.includes(\"'\") || match.includes(\"\\\"\")) {\n      result = match.slice(1, formatLength - 1);\n    } else {\n      result = formatters[match[0]](date, formatLength, info);\n    }\n\n    return result;\n  });\n}","map":null,"metadata":{},"sourceType":"module"}