{"ast":null,"code":"import { isPresent } from '../utils';\nimport { compose } from '../funcs'; // tslint:enable:max-line-length\n\nconst set = (field, target, value) => {\n  target[field] = value;\n  return target;\n};\n\nconst toCamelCase = str => str.replace(/(^[A-Z])/g, (_, g1) => g1.toLowerCase());\n\nconst prop = fieldName => obj => {\n  const value = obj[fieldName];\n\n  if (isPresent(value)) {\n    return value;\n  }\n\n  return obj[toCamelCase(fieldName)];\n};\n\nconst member = prop(\"Member\");\nconst aggregateMethodName = prop(\"AggregateMethodName\");\nconst value = prop(\"Value\");\n\nconst convert = mapper => values => Object.keys(values).reduce(mapper.bind(null, values), {});\n\nconst translateAggregate = convert((source, acc, field) => set(field.toLowerCase(), acc, source[field]));\nconst translateAggregates = convert((source, acc, field) => set(field, acc, translateAggregate(source[field])));\n\nconst valueOrDefault = (value, defaultValue) => isPresent(value) ? value : defaultValue;\n\nconst normalizeGroup = group => ({\n  aggregates: group.Aggregates || group.aggregates,\n  field: group.Member || group.member || group.field,\n  hasSubgroups: group.HasSubgroups || group.hasSubgroups || false,\n  items: group.Items || group.items,\n  value: valueOrDefault(group.Key, valueOrDefault(group.key, group.value))\n});\n\nconst translateGroup = compose(({\n  field,\n  hasSubgroups,\n  value,\n  aggregates,\n  items\n}) => ({\n  aggregates: translateAggregates(aggregates),\n  field,\n  items: hasSubgroups ? items.map(translateGroup) : items,\n  value\n}), normalizeGroup); // tslint:disable:max-line-length\n\n/**\n * Converts the grouped result, which is returned into the `Data` field of the UI for ASP.NET MVC `ToDataSourceResult` method, to a comparable format.\n * @param data - The value of the `Data` field of the response.\n * @returns {GroupResult[]} - The converted result.\n */\n\nexport const translateDataSourceResultGroups = data => data.map(translateGroup);\n/**\n * Converts the `AggregateResults` field content, which is returned by the UI for ASP.NET MVC `ToDataSourceResult` method, to a comparable format.\n * @param data - The value of the `AggregateResults` field of the response.\n * @returns {AggregateResult} - The converted result.\n */\n// tslint:enable:max-line-length\n\nexport const translateAggregateResults = data => (data || []).reduce((acc, x) => set(member(x), acc, set(aggregateMethodName(x).toLowerCase(), acc[member(x)] || {}, value(x))), {});","map":null,"metadata":{},"sourceType":"module"}