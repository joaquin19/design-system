{"ast":null,"code":"import PathNode from './path-node';\nimport renderStyle from './utils/render-style';\nimport renderAttr from './utils/render-attribute';\nimport { htmlEncode, support } from '../common';\nimport { normalizeText } from '../text-metrics';\nconst ENTITY_REGEX = /&(?:[a-zA-Z]+|#\\d+);/g;\n\nfunction decodeEntities(text) {\n  if (!text || typeof text !== \"string\" || !ENTITY_REGEX.test(text)) {\n    return text;\n  }\n\n  const element = decodeEntities._element;\n  ENTITY_REGEX.lastIndex = 0;\n  return text.replace(ENTITY_REGEX, match => {\n    element.innerHTML = match;\n    return element.textContent || element.innerText;\n  });\n}\n\nif (typeof document !== \"undefined\") {\n  decodeEntities._element = document.createElement(\"span\");\n}\n\nclass TextNode extends PathNode {\n  geometryChange() {\n    const pos = this.pos();\n    this.attr(\"x\", pos.x);\n    this.attr(\"y\", pos.y);\n    this.invalidate();\n  }\n\n  optionsChange(e) {\n    if (e.field === \"font\") {\n      this.attr(\"style\", renderStyle(this.mapStyle()));\n      this.geometryChange();\n    } else if (e.field === \"content\") {\n      super.content(this.srcElement.content());\n    }\n\n    super.optionsChange(e);\n  }\n\n  mapStyle(encode) {\n    const style = super.mapStyle(encode);\n    let font = this.srcElement.options.font;\n\n    if (encode) {\n      font = htmlEncode(font);\n    }\n\n    style.push([\"font\", font], [\"white-space\", \"pre\"]);\n    return style;\n  }\n\n  pos() {\n    const pos = this.srcElement.position();\n    const size = this.srcElement.measure();\n    return pos.clone().setY(pos.y + size.baseline);\n  }\n\n  renderContent() {\n    let content = this.srcElement.content();\n    content = decodeEntities(content);\n    content = htmlEncode(content);\n    return normalizeText(content);\n  }\n\n  renderTextAnchor() {\n    let anchor;\n\n    if ((this.options || {}).rtl && !(support.browser.msie || support.browser.edge)) {\n      anchor = 'end';\n    }\n\n    return renderAttr(\"text-anchor\", anchor);\n  }\n\n  template() {\n    return `<text ${this.renderId()} ${this.renderTextAnchor()} ${this.renderStyle()} ${this.renderOpacity()}` + `x='${this.pos().x}' y='${this.pos().y}' ${this.renderStroke()} ${this.renderTransform()} ${this.renderDefinitions()}` + `${this.renderFill()}>${this.renderContent()}</text>`;\n  }\n\n}\n\nexport default TextNode;","map":null,"metadata":{},"sourceType":"module"}