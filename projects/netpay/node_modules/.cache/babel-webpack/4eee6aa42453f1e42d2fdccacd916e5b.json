{"ast":null,"code":"import HasObservers from '../core/has-observers';\nimport withAccessors from '../mixins/with-accessors';\nimport { defined, round } from '../util';\n\nclass Size extends withAccessors(HasObservers, [\"width\", \"height\"]) {\n  constructor(width, height) {\n    super();\n    this.width = width || 0;\n    this.height = height || 0;\n  }\n\n  equals(other) {\n    return other && other.width === this.width && other.height === this.height;\n  }\n\n  clone() {\n    return new Size(this.width, this.height);\n  }\n\n  toArray(digits) {\n    const doRound = defined(digits);\n    const width = doRound ? round(this.width, digits) : this.width;\n    const height = doRound ? round(this.height, digits) : this.height;\n    return [width, height];\n  }\n\n  static create(arg0, arg1) {\n    if (defined(arg0)) {\n      if (arg0 instanceof Size) {\n        return arg0;\n      } else if (arguments.length === 1 && arg0.length === 2) {\n        return new Size(arg0[0], arg0[1]);\n      }\n\n      return new Size(arg0, arg1);\n    }\n  }\n\n  static get ZERO() {\n    return new Size(0, 0);\n  }\n\n}\n\nexport default Size;","map":null,"metadata":{},"sourceType":"module"}