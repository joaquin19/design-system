{"ast":null,"code":"const fromCharCode = String.fromCharCode;\nexport const BOM = '\\xfe\\xff'; // Encodes a string as UTF-8\n\nexport function encodeUTF8(input) {\n  let output = \"\";\n\n  for (let i = 0; i < input.length; i++) {\n    let code = input.charCodeAt(i);\n\n    if (0xD800 <= code && code <= 0xDBFF) {\n      const hi = code;\n      const low = input.charCodeAt(++i);\n\n      if (!isNaN(low)) {\n        // Combine high and low surrogate\n        // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/charCodeAt\n        code = (hi - 0xD800) * 0x400 + (low - 0xDC00) + 0x10000;\n      }\n    }\n\n    if (code < 0x80) {\n      // One byte\n      output += fromCharCode(code);\n    } else if (code < 0x800) {\n      // Two bytes\n      output += fromCharCode(0xC0 | code >>> 6);\n      output += fromCharCode(0x80 | code & 0x3f);\n    } else if (code < 0x10000) {\n      // Three bytes\n      output += fromCharCode(0xE0 | code >>> 12);\n      output += fromCharCode(0x80 | code >>> 6 & 0x3f);\n      output += fromCharCode(0x80 | code & 0x3f);\n    } else if (code < 0x10FFFF) {\n      // Four bytes\n      output += fromCharCode(0xF0 | code >>> 18);\n      output += fromCharCode(0x80 | code >>> 12 & 0x3f);\n      output += fromCharCode(0x80 | code >>> 6 & 0x3f);\n      output += fromCharCode(0x80 | code & 0x3f);\n    }\n  }\n\n  return output;\n}\n\nfunction encodeUnit(codeUnit) {\n  return fromCharCode(codeUnit >> 8) + fromCharCode(codeUnit & 0x00ff);\n} // Encodes a string as UTF-16 big-endian\n\n\nexport function encodeUTF16BE(input) {\n  let output = '';\n\n  for (let i = 0; i < input.length; i++) {\n    const c = input.charCodeAt(i);\n\n    if (c < 0xFFFF) {\n      output += encodeUnit(c);\n    } else {\n      const lead = (c - 0x10000 >> 10) + 0xD800;\n      const trail = (c - 0x10000 & 0x3FF) + 0xDC00;\n      output += encodeUnit(lead);\n      output += encodeUnit(trail);\n    }\n  }\n\n  return output;\n}","map":null,"metadata":{},"sourceType":"module"}